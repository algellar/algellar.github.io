<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>RSA construct</title>
    <link href="/2023/05/30/RSA/RSA%20construct/"/>
    <url>/2023/05/30/RSA/RSA%20construct/</url>
    
    <content type="html"><![CDATA[<p>本文整理了国赛Ciscn两道利用RSA.construct函数漏洞的题目</p><h2 id="Ciscn-badkey1">Ciscn-badkey1</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python">signal.alarm(<span class="hljs-number">10</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Give me a bad RSA keypair.&quot;</span>)<br><br><span class="hljs-keyword">try</span>:<br>    p = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;p = &#x27;</span>))<br>    q = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;q = &#x27;</span>))<br>    <span class="hljs-keyword">assert</span> p &gt; <span class="hljs-number">0</span><br>    <span class="hljs-keyword">assert</span> q &gt; <span class="hljs-number">0</span><br>    <span class="hljs-keyword">assert</span> p != q<br>    <span class="hljs-keyword">assert</span> p.bit_length() == <span class="hljs-number">512</span><br>    <span class="hljs-keyword">assert</span> q.bit_length() == <span class="hljs-number">512</span><br>    <span class="hljs-keyword">assert</span> isPrime(p)<br>    <span class="hljs-keyword">assert</span> isPrime(q)<br>    n = p * q<br>    e = <span class="hljs-number">65537</span><br>    <span class="hljs-keyword">assert</span> p % e != <span class="hljs-number">1</span><br>    <span class="hljs-keyword">assert</span> q % e != <span class="hljs-number">1</span><br>    d = inverse(e, (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br><span class="hljs-keyword">except</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Invalid params&quot;</span>)<br>    exit(<span class="hljs-number">2</span>)<br><br><span class="hljs-keyword">try</span>:<br>    key = RSA.construct([n,e,d,p,q])<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;This is not a bad RSA keypair.&quot;</span>)<br>    exit(<span class="hljs-number">3</span>)<br><span class="hljs-keyword">except</span> KeyboardInterrupt:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hacker detected.&quot;</span>)<br>    exit(<span class="hljs-number">4</span>)<br><span class="hljs-keyword">except</span> ValueError:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;How could this happen?&quot;</span>)<br>    <span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br>    <span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><p>RSA.construct 中检测了$d$和$n$是否互素，而服务器的代码里缺少这一步，因此解题思路就是找到一对满足$d$和$n$有公因数的$p,q$。</p><p>不妨假设$p = gcd(d,n)$，那么$d=kp$。再根据$ed\equiv 1(mod;(p-1)(q-1))$，可列出：<br>$$<br>e\cdot kp-1=k^′(p-1)(q-1)<br>$$<br>改写一下就是 $e\cdot kp-k^′(p-1)(q-1)=1$，注意到$k^′$的大小和$e$接近，因此可以先爆破$k^′$，把$k^′$当作已知量，对给定一个$p$，利用拓展欧几里得算法求出$k,(q-1)$和公因数$g$。如果公因数$g=1$而且$q$是质数，那就找到了一组解。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    p = getPrime(<span class="hljs-number">512</span>)<br>    e = <span class="hljs-number">0x10001</span><br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>):<br>        g, kp, q_ = xgcd(e*p, -k*(p-<span class="hljs-number">1</span>))<br>        <span class="hljs-keyword">if</span> g == <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">break</span><br>    q = q_ + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> g == <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> isPrime(q):<br>        <span class="hljs-keyword">break</span><br>        <br></code></pre></td></tr></table></figure><h2 id="Ciscn-badkey2">Ciscn-badkey2</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python">e = <span class="hljs-number">65537</span><br>p = getPrime(<span class="hljs-number">512</span>)<br><span class="hljs-keyword">while</span> p % e == <span class="hljs-number">1</span>:<br>    p = getPrime(<span class="hljs-number">512</span>)<br>    <br>signal.alarm(<span class="hljs-number">10</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Give me 10 bad RSA keypairs that have the same prime factor:&quot;</span>, p)<br><br>used_n = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    <span class="hljs-keyword">try</span>:<br>        n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;n = &#x27;</span>))<br>        <span class="hljs-keyword">assert</span> n % p == <span class="hljs-number">0</span><br>        <span class="hljs-keyword">assert</span> n <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> used_n<br>        used_n.append(n)<br>        q = n // p<br>        <span class="hljs-keyword">assert</span> q &gt; <span class="hljs-number">0</span><br>        <span class="hljs-keyword">assert</span> q != p<br>        <span class="hljs-keyword">assert</span> q.bit_length() == <span class="hljs-number">512</span><br>        <span class="hljs-keyword">assert</span> isPrime(q)<br>        <span class="hljs-keyword">assert</span> q % e != <span class="hljs-number">1</span><br>        d = inverse(e, (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Invalid n&quot;</span>)<br>        exit(<span class="hljs-number">2</span>)<br><br>    <span class="hljs-keyword">try</span>:<br>        key = RSA.construct([n,e,d])<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;This is not a bad RSA keypair,&quot;</span>)<br>        exit(<span class="hljs-number">3</span>)<br>    <span class="hljs-keyword">except</span> KeyboardInterrupt:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hacker detected.&quot;</span>)<br>        exit(<span class="hljs-number">4</span>)<br>    <span class="hljs-keyword">except</span> ValueError:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Good job!&quot;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;How could this happen?&quot;</span>)<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><p>这题里面的RSA.construct函数只传了$n,e,d$三个参数，RSA.construct函数需要从这三个参数里恢复出$p,q$，如果不能恢复就会报错ValueError。</p><p>下面是construct函数内部代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python">ktot = d * e - <span class="hljs-number">1</span><br><span class="hljs-comment"># The quantity d*e-1 is a multiple of phi(n), even,</span><br><span class="hljs-comment"># and can be represented as t*2^s.</span><br>t = ktot<br><span class="hljs-keyword">while</span> t % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>    t //= <span class="hljs-number">2</span><br>    <br><span class="hljs-comment"># Cycle through all multiplicative inverses in Zn.</span><br><span class="hljs-comment"># The algorithm is non-deterministic, but there is a 50% chance</span><br><span class="hljs-comment"># any candidate a leads to successful factoring.</span><br><span class="hljs-comment"># See &quot;Digitalized Signatures and Public Key Functions as Intractable</span><br><span class="hljs-comment"># as Factorization&quot;, M. Rabin, 1979</span><br>spotted = <span class="hljs-literal">False</span><br>a = Integer(<span class="hljs-number">2</span>)<br><span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> spotted <span class="hljs-keyword">and</span> a &lt; <span class="hljs-number">100</span>:<br>    k = Integer(t)<br>    <span class="hljs-comment"># Cycle through all values a^&#123;t*2^i&#125;=a^k</span><br>    <span class="hljs-keyword">while</span> k &lt; ktot:<br>        cand = <span class="hljs-built_in">pow</span>(a, k, n)<br>        <span class="hljs-comment"># Check if a^k is a non-trivial root of unity (mod n)</span><br>        <span class="hljs-keyword">if</span> cand != <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> cand != (n - <span class="hljs-number">1</span>) <span class="hljs-keyword">and</span> <span class="hljs-built_in">pow</span>(cand, <span class="hljs-number">2</span>, n) == <span class="hljs-number">1</span>:<br>            <span class="hljs-comment"># We have found a number such that (cand-1)(cand+1)=0 (mod n).</span><br>            <span class="hljs-comment"># Either of the terms divides n.</span><br>            p = Integer(n).gcd(cand + <span class="hljs-number">1</span>)<br>            spotted = <span class="hljs-literal">True</span><br>            <span class="hljs-keyword">break</span><br>            k *= <span class="hljs-number">2</span><br>            <span class="hljs-comment"># This value was not any good... let&#x27;s try another!</span><br>            a += <span class="hljs-number">2</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> spotted:<br>                <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;Unable to compute factors p and q from exponent d.&quot;</span>)<br></code></pre></td></tr></table></figure><p>其实是传统的已知私钥分解模数$n$的方法，任意取一个底数$a$，如果存在$t=\frac{ed-1}{2^k},;t,k\in\N$，使得$a^t\not\equiv 1;or -1(mod; n)$且$a^{2t}\equiv 1(mod; n)$，那么$gcd(a^t-1,n)$或$gcd(a^t+1,n)$就为$n$的因数。</p><p>但是问题在于，construct函数里用来检验的数$a$只是2-100之间的偶数。因此可以构造一对$p,q$使得函数无法对$n$进行分解。</p><p>为了将问题进行简化，先假设$p\equiv q\equiv 3(mod;4)$​，容易得到：$(p-1)//2$​和$(q-1)//2$​都为奇数。那么求解思路就是找到的$p,q$​使得<br>$$<br>a^{\frac{(p-1)(q-1)}4}\equiv1(mod;n)<br>$$<br>也等价于：<br>$$<br>ord_n(a)\leq\frac{(p-1)(q-1)}4<br>$$<br>根据中国剩余定理，如果$ord_p(a)=\frac{p-1}2,ord_q(a)=\frac{q-1}2$，就有：<br>$$<br>ord_n(a)=\frac{(p-1)(q-1)}4<br>$$<br>所以如果对于所有检验的$a$，如果$a^{\frac{p-1}2}(mod;p)$和$a^{\frac{q-1}2}(mod;q)$同为1，就有：<br>$$<br>a^{\frac{(p-1)(q-1)}4}\equiv1(mod;n)<br>$$<br>而这样基本上是不可能的，因为在2-100之间几乎一定会有$p$的原根。但是如果$a$是$p$和$q$的原根，即：<br>$$<br>a^{\frac{p-1}2}\equiv-1(mod;p),a^{\frac{q-1}2}\equiv-1(mod;q)<br>$$<br>那么$a$一定就为$n$的原根，从而：<br>$$<br>a^{\frac{(p-1)(q-1)}2}\equiv-1(mod;n)<br>$$<br>这种情况下，依然无法对$n$进行分解。</p><p>根据欧拉判别条件，如果$a^{\frac{p-1}2}\equiv1(mod;p)$，$a$就是模$p$的二次剩余；否则$a^{\frac{p-1}2}\equiv-1(mod;p)$，$a$就是模$p$的非二次剩余，两种情况下的勒让德符号$\left(\frac ap\right)$分别等于1、-1.</p><p>根据上面的结果，我们想让$\left(\frac ap\right)=\left(\frac aq\right)$​，因此考虑$p\equiv q(mod;a)$​，又因为$p\equiv q\equiv 3(mod;4)$​，根据二次互反律可以得到：<br>$$<br>\left(\frac ap\right)=\left(\frac aq\right),a&gt;2<br>$$<br>$a=2$时，需要$p\equiv q(mod;8)$才能满足$\left(\frac ap\right)=\left(\frac aq\right)$.</p><p>二次互反律如下：</p><p><img src="/images/Quadratic_Reciprocity.png" alt="Quadratic Reciprocity"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.PublicKey <span class="hljs-keyword">import</span> RSA<br><span class="hljs-keyword">from</span> Crypto.Math.Primality <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> next_prime<br><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> prod<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>    p = getPrime(<span class="hljs-number">512</span>)<br>    <span class="hljs-keyword">if</span> p % <span class="hljs-number">4</span> == <span class="hljs-number">3</span>:<br>        <span class="hljs-keyword">break</span><br><br>t = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-number">50</span>):<br>    <span class="hljs-keyword">if</span> isPrime(i):<br>        t.append(i)<br><br>pmod = p % <span class="hljs-number">614889782588491410</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>    <span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>        q = pmod + randint((<span class="hljs-number">2</span> ** <span class="hljs-number">511</span>) // <span class="hljs-number">614889782588491410</span>, (<span class="hljs-number">2</span> ** <span class="hljs-number">512</span>) // <span class="hljs-number">614889782588491410</span>) * <span class="hljs-number">614889782588491410</span><br>        <span class="hljs-comment"># q = getPrime(512)</span><br>        <span class="hljs-keyword">if</span> isPrime(q) <span class="hljs-keyword">and</span> q % <span class="hljs-number">4</span> == <span class="hljs-number">3</span>:<br>            <span class="hljs-keyword">break</span><br>    n = p * q<br>    e = <span class="hljs-number">0x10001</span><br>    d = inverse(e, (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>))<br><br>    <span class="hljs-keyword">try</span>:<br>        key = RSA.construct([n, e, d])<br><br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">except</span> ValueError:<br>        <span class="hljs-built_in">print</span>(p)<br>        <span class="hljs-built_in">print</span>(q)<br>        <span class="hljs-keyword">break</span><br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>knowledge</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RSA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ahssp</title>
    <link href="/2023/02/25/Lattice/Affine%20Hidden%20Subset%20Sums%20Problem/"/>
    <url>/2023/02/25/Lattice/Affine%20Hidden%20Subset%20Sums%20Problem/</url>
    
    <content type="html"><![CDATA[<p>d3pack is a crypto challenge I made in d3ctf.</p><h2 id="d3pack">d3pack</h2><p>This challenge is based on the affine hidden subset sum problem$^{[1]}$. Given $\mathbf{h},\mathbf{e},p$ satisfying $\mathbf{h}+s\mathbf{e}=\alpha_1\mathbf{x}_1+\alpha_1\mathbf{x}_1+\cdots+\alpha_1\mathbf{x}_1(mod; p)$, find $s$.</p><p>The key to solving this problem is to use the concept of an orthogonal lattice. Given a lattice $\mathcal{L}\subseteq\mathbb{Z}^m$, its orthogonal lattice is defined as :<br>$$<br>\mathcal{L}^{\perp}:={\mathbf{v}\in\Z^m|\forall\mathbf{b}\in\mathcal{L},\langle\mathbf{v},\mathbf{b}\rangle=0}<br>$$<br>The completion of a lattice $\mathcal{L}$ is the lattice $\bar{\mathcal{L}}=(\mathcal{L}^{\perp})^{\perp}$. Clearly, $\mathcal{L}$ is a sublattice of $\bar{\mathcal{L}}$.</p><h3 id="Solving-method">Solving method</h3><p>For this problem, we denote by $\mathcal{L}_{\mathbf{x},\mathbf{e}}$ the lattice generated by $\mathbf{e}$ and the vectors $\mathbf{x}<em>i$, and by $\mathcal{L}</em>\mathbf{x}$ the lattice generated by the vectors $\mathbf{x}_i$ only.</p><p>To solve this challenge, the first step is to compute the completion lattice $\bar{\mathcal{L}}_\mathbf{x}$.</p><p>We write $\mathbf{h}=[h_1,h_2,\mathbf{h}‘],\mathbf{e}=[e_1,e_2,\mathbf{e}’]$ where $\mathbf{h}‘,\mathbf{e}’\in\mathbb{Z}^{m-2}$ ,$B=\begin{bmatrix}<br>h_1&amp;e_1\<br>h_2&amp;e_2<br>\end{bmatrix}^{-1}$, and form the lattice as follows:<br>$$<br>\mathcal{L}_0= \begin{bmatrix}<br>p\mathbf{I}<em>2&amp;\<br>-[\mathbf{h}‘,\mathbf{e}’]B&amp;\mathbf{I}</em>{m-2}<br>\end{bmatrix}<br>$$</p><p>It can be proved that $\mathcal{L}_0$ is the  orthogonal lattice of $[\mathbf{h},\mathbf{e}]$.</p><p>Then compute an LLL-reduced basis of $\mathcal{L}<em>0$ and extract the first $m-n-1$ basis vectors to obtain $\mathcal{L}</em>{\mathbf{x},\mathbf{e}}^{\perp}$.</p><p>Next, we compute $\bar{\mathcal{L}}<em>{\mathbf{x},\mathbf{e}}=(\mathcal{L}</em>{\mathbf{x},\mathbf{e}}^{\perp})^{\perp}$ using the BKZ algorithm$^{[1][2]}$, and the first $n$ basis vectors of LLL-reduced basis for $\bar{\mathcal{L}}<em>{\mathbf{x},\mathbf{e}}$ is $\bar{\mathcal{L}}</em>\mathbf{x}$.</p><p>Finally, we utilize the greedy algorithm described in the article$^{[1]}$ to recover $\mathbf{x}_i$, and then determine $s$ by solving linear equations over the field modulo $q$.</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># https://eprint.iacr.org/2020/461.pdf</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">allpmones</span>(<span class="hljs-params">v</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>([vj <span class="hljs-keyword">for</span> vj <span class="hljs-keyword">in</span> v <span class="hljs-keyword">if</span> vj <span class="hljs-keyword">in</span> [-<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>]]) == <span class="hljs-built_in">len</span>(v)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">orthoLattice</span>(<span class="hljs-params">B, x0</span>):<br>    r, m = B.nrows(), B.ncols()<br>    M = identity_matrix(m).change_ring(ZZ)<br>    B1 = B[:, :r]<br>    B2 = B[:, r:]<br>    V = Matrix(Zmod(x0), B1)<br>    W = V.inverse()<br>    M[r:m,:r] = -(W * B2.change_ring(Zmod(x0))).change_ring(ZZ).transpose()<br>    M[:r, :r] = x0 * identity_matrix(r)<br>    <span class="hljs-keyword">return</span> M<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">allones</span>(<span class="hljs-params">v</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>([vj <span class="hljs-keyword">for</span> vj <span class="hljs-keyword">in</span> v <span class="hljs-keyword">if</span> vj <span class="hljs-keyword">in</span> [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>]]) == <span class="hljs-built_in">len</span>(v):<br>        <span class="hljs-keyword">return</span> v<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>([vj <span class="hljs-keyword">for</span> vj <span class="hljs-keyword">in</span> v <span class="hljs-keyword">if</span> vj <span class="hljs-keyword">in</span> [<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>]]) == <span class="hljs-built_in">len</span>(v):<br>        <span class="hljs-keyword">return</span> -v<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">recoverBinary</span>(<span class="hljs-params">M5</span>):<br>    lv = [allones(vi) <span class="hljs-keyword">for</span> vi <span class="hljs-keyword">in</span> M5 <span class="hljs-keyword">if</span> allones(vi)]<br>    n = M5.nrows()<br>    <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> lv:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            nv = allones(M5[i] - v)<br>            <span class="hljs-keyword">if</span> nv <span class="hljs-keyword">and</span> nv <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> lv:<br>                lv.append(nv)<br>            nv = allones(M5[i] + v)<br>            <span class="hljs-keyword">if</span> nv <span class="hljs-keyword">and</span> nv <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> lv:<br>                lv.append(nv)<br>    <span class="hljs-keyword">return</span> Matrix(lv)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">kernelLLL</span>(<span class="hljs-params">M</span>):<br>    n = M.nrows()<br>    m = M.ncols()<br>    <span class="hljs-keyword">if</span> m &lt; <span class="hljs-number">2</span> * n:<br>        <span class="hljs-keyword">return</span> M.right_kernel().matrix()<br>    K = <span class="hljs-number">2</span> ^ (m//<span class="hljs-number">2</span>) * M.height()<br><br>    MB = Matrix(ZZ, m + n, m)<br>    MB[:n] = K * M<br>    MB[n:] = identity_matrix(m)<br><br>    MB2 = MB.T.LLL().T<br><br>    <span class="hljs-keyword">assert</span> MB2[:n, : m - n] == <span class="hljs-number">0</span><br>    Ke = MB2[n:, : m - n].T<br><br>    <span class="hljs-keyword">return</span> Ke<br><br>n = <span class="hljs-number">50</span><br>m = <span class="hljs-number">180</span><br>p= <span class="hljs-comment"># from output.txt</span><br>h= <span class="hljs-comment"># from output.txt</span><br>e= <span class="hljs-comment"># from output.txt</span><br>e = vector(e)<br>h = vector(h)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n =&quot;</span>, n, <span class="hljs-string">&quot;m =&quot;</span>, m)<br><br>E = matrix(ZZ, <span class="hljs-number">2</span>, m, [e.<span class="hljs-built_in">list</span>(), h.<span class="hljs-built_in">list</span>()])<br>M = orthoLattice(E, p)<br>t = cputime()<br>M2 = M.LLL()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;LLL step1: %.1f&quot;</span> % cputime(t))<br>MOrtho = M2[: m-n-<span class="hljs-number">1</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot; log(Height,2)=&quot;</span>,<span class="hljs-built_in">int</span>(log(MOrtho.height(),<span class="hljs-number">2</span>)))<br>t2 = cputime()<br>ke = kernelLLL(MOrtho)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot; Kernel: %.1f&quot;</span> % cputime(t2))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot; Total step1: %.1f&quot;</span> % cputime(t))<br><br>beta = <span class="hljs-number">2</span><br>tbk = cputime()<br><span class="hljs-keyword">while</span> beta &lt; n:<br>    <span class="hljs-keyword">if</span> beta == <span class="hljs-number">2</span>:<br>        M5 = ke.LLL()<br>    <span class="hljs-keyword">else</span>:<br>        M5 = M5.BKZ(block_size=beta)<br><br>    <span class="hljs-comment"># we break when we only get vectors with &#123;-1,0,1&#125; components</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>([<span class="hljs-literal">True</span> <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> M5 <span class="hljs-keyword">if</span> allpmones(v)]) == n:<br>        <span class="hljs-keyword">break</span><br><br>    <span class="hljs-keyword">if</span> beta == <span class="hljs-number">2</span>:<br>        beta = <span class="hljs-number">10</span><br>    <span class="hljs-keyword">else</span>:<br>        beta += <span class="hljs-number">10</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;BKZ beta=%d: %.1f&quot;</span> % (beta, cputime(tbk)))<br>t2 = cputime()<br>MB = recoverBinary(M5)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;  Recovery: %.1f&quot;</span> % cputime(t2))<br>L = matrix(Zmod(p), MB).transpose()[:n+<span class="hljs-number">1</span>]<br>L = L.augment(-e[:n+<span class="hljs-number">1</span>].column())<br>h_ = h[<span class="hljs-number">0</span>:n+<span class="hljs-number">1</span>]<br>a = L^-<span class="hljs-number">1</span>*h_<br><br>a = [long_to_bytes(ZZ(i)).strip() <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a]<br><span class="hljs-keyword">for</span> block <span class="hljs-keyword">in</span> a:<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">b&quot;d3ctf&quot;</span> <span class="hljs-keyword">in</span> block:<br>        <span class="hljs-built_in">print</span>(block)<br><br><br></code></pre></td></tr></table></figure><h3 id="Reference">Reference</h3><p>[1] Coron J S, Gini A. A polynomial-time algorithm for solving the hidden subset sum problem[C]//Advances in Cryptology–CRYPTO 2020: 40th Annual International Cryptology Conference, CRYPTO 2020, Santa Barbara, CA, USA, August 17–21, 2020, Proceedings, Part II. Cham: Springer International Publishing, 2020: 3-31.(<a href="https://eprint.iacr.org/2020/461.pdf">https://eprint.iacr.org/2020/461.pdf</a>)</p><p>[2] Phong Q. Nguyen and Jacques Stern. Merkle-hellman revisited: A cryptanalysis of the Qu-Vanstone cryptosystem based on group factorizations. In Advances in Cryptology - CRYPTO ’97, 17th Annual International Cryptology Conference, Santa Barbara, California, USA, August 17-21, 1997, Proceedings, pages 198–212, 1997.<br>(<a href="https://link.springer.com/content/pdf/10.1007/BFb0052236.pdf">https://link.springer.com/content/pdf/10.1007/BFb0052236.pdf</a>)</p>]]></content>
    
    
    <categories>
      
      <category>knowledge</category>
      
    </categories>
    
    
    <tags>
      
      <tag>lattice</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NTRU attack</title>
    <link href="/2023/01/26/Lattice/NTRU%20attack/"/>
    <url>/2023/01/26/Lattice/NTRU%20attack/</url>
    
    <content type="html"><![CDATA[<h1>NTRU 常见攻击</h1><p>本文总结了几种NTRU攻击，包括经典格攻击、多次加密同一明文攻击。</p><h2 id="NTRU加密流程">NTRU加密流程</h2><p><img src="/images/NTRU.png" alt="NTRU"></p><p>有些时候 $h=p<em>F_q</em>g$，$e \equiv r*h+m ;(mod;q)$ ，如果这样做，$p$ 理论上可以不公开。</p><p>条件 $q&gt;(6d+1)p$ 需要的原因在于 $p<em>g</em>r+f*m;(mod; q)$ 的系数要小于 $q$ ，以便进行后一步解密。分析如下：</p><p>$p<em>g</em>r$ 的系数最大为 $p<em>2d$ ，而 $f</em>m$ 系数的最大值为 $(2d+1)<em>\frac{1}{2}p$ ，从而两者相加系数不超过 $(3d+1)</em>\frac{1}{2}p$ ， $q&gt;(6d+1)p$ 显然是更高的界。</p><p>这也说明，只要 $f, g$ 满足 $h=F_q*g$ 并且 $f, g$ 要足够小，即可作为私钥解密。</p><h2 id="格攻击得到私钥">格攻击得到私钥</h2><p>由于 $f(x)*h(x)\equiv g(x);(mod; q)$ ，所以存在多项式 $u(x)$ 使得 $f(x)*h(x)=g(x)+qu(x)$ 。可以构造格子满足：$(f,-u)M^{NTRU}_h = (f, g)$ 。<br>$$<br>M^{NTRU}_h=\left(\begin{matrix}<br>1&amp;h\<br>0&amp;q<br>\end{matrix}\right)<br>$$</p><h2 id="重复明文攻击">重复明文攻击</h2><p>根据 $e \equiv r*h+m ;(mod;q)$ ，如果我们让公钥重复加密同一明文，那我们则会得到很多组类似 $e_i-e_0 \equiv h(r_i-r_0); (mod; q)$ 的方程。由于 $r \in \mathcal{I}(d, d) ,\quad d &lt;&lt;N$ ，所以在 $(r_i-r_0)$ 中，系数重复出现最多的可能就是 $r_0$ 的系数，从而得到 $r_0$ 。</p><p>而问题在与 $h$ 在商环 $R$ 中不可逆，处理这个的方法有几种，较为方便的就是将 $h,R$ 同时除去它们的公因子，之后 $h$ 就可逆了。</p><h2 id="代码">代码</h2><h3 id="1-NTRU加密">1.NTRU加密</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs stylus">from random import shuffle, getrandbits<br>from Crypto<span class="hljs-selector-class">.Util</span><span class="hljs-selector-class">.number</span> import *<br>Zx = <span class="hljs-built_in">PolynomialRing</span>(ZZ, <span class="hljs-string">&#x27;x&#x27;</span>)<br>x = Zx<span class="hljs-selector-class">.gen</span>()<br><br><br>def <span class="hljs-built_in">convolution</span>(f, g, R):<br>    return (f * g) % R<br><br><br>def <span class="hljs-built_in">balancedmod</span>(f, <span class="hljs-selector-tag">q</span>, R):<br>    g = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(lambda x: ((x + q<span class="hljs-comment">//2) % q) - q//2, f.list()))</span><br>    return <span class="hljs-built_in">Zx</span>(g) % R<br><br><br>def <span class="hljs-built_in">random_poly</span>(n, d1, d2):<br>    assert d1 + d2 &lt;= n<br>    result = d1 * <span class="hljs-selector-attr">[1]</span> + d2 * <span class="hljs-selector-attr">[-1]</span> + (n - d1 - d2) * <span class="hljs-selector-attr">[0]</span><br>    <span class="hljs-built_in">shuffle</span>(result)<br>    return <span class="hljs-built_in">Zx</span>(result)<br><br><br>def <span class="hljs-built_in">invert_poly_mod_prime</span>(f, R, p):<br>    T = Zx<span class="hljs-selector-class">.change_ring</span>(<span class="hljs-built_in">Integers</span>(p))<span class="hljs-selector-class">.quotient</span>(R)<br>    return <span class="hljs-built_in">Zx</span>(<span class="hljs-built_in">lift</span>(<span class="hljs-number">1</span> / <span class="hljs-built_in">T</span>(f)))<br><br><br>def <span class="hljs-built_in">invert_poly_mod_powerof2</span>(f, R, q):  #  f 在模 <span class="hljs-number">2</span>^<span class="hljs-number">16</span> 下的逆<br>    g = <span class="hljs-built_in">invert_poly_mod_prime</span>(f, R, <span class="hljs-number">2</span>)<br>    e = <span class="hljs-built_in">log</span>(<span class="hljs-selector-tag">q</span>, <span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, e):<br>        g = ((<span class="hljs-number">2</span> * g - f * g ** <span class="hljs-number">2</span>) % R) % <span class="hljs-selector-tag">q</span><br>    return g<br><br><br>class NTRUCipher:<br>    def <span class="hljs-built_in">__init__</span>(self, N, <span class="hljs-selector-tag">p</span>, <span class="hljs-selector-tag">q</span>, d):<br>        self<span class="hljs-selector-class">.N</span> = N<br>        self<span class="hljs-selector-class">.p</span> = <span class="hljs-selector-tag">p</span><br>        self<span class="hljs-selector-class">.q</span> = <span class="hljs-selector-tag">q</span><br>        self<span class="hljs-selector-class">.d</span> = d<br>        self<span class="hljs-selector-class">.R</span> = x ** N - <span class="hljs-number">1</span><br>        # key generation<br>        self<span class="hljs-selector-class">.g</span> = <span class="hljs-built_in">random_poly</span>(self<span class="hljs-selector-class">.N</span>, d, d)<br>        # self<span class="hljs-selector-class">.g</span> = x^<span class="hljs-number">119</span> - x^<span class="hljs-number">115</span> - x^<span class="hljs-number">112</span> + x^<span class="hljs-number">111</span> + x^<span class="hljs-number">110</span> - x^<span class="hljs-number">106</span> + x^<span class="hljs-number">103</span> - x^<span class="hljs-number">101</span> + x^<span class="hljs-number">100</span> - x^<span class="hljs-number">99</span> + x^<span class="hljs-number">98</span> - x^<span class="hljs-number">97</span> - x^<span class="hljs-number">96</span> + x^<span class="hljs-number">95</span> - x^<span class="hljs-number">90</span> + x^<span class="hljs-number">89</span> - x^<span class="hljs-number">88</span> - x^<span class="hljs-number">86</span> + x^<span class="hljs-number">85</span> + x^<span class="hljs-number">83</span> + x^<span class="hljs-number">82</span> + x^<span class="hljs-number">75</span> - x^<span class="hljs-number">74</span> + x^<span class="hljs-number">69</span> - x^<span class="hljs-number">64</span> + x^<span class="hljs-number">62</span> + x^<span class="hljs-number">58</span> + x^<span class="hljs-number">57</span> + x^<span class="hljs-number">54</span> - x^<span class="hljs-number">51</span> + x^<span class="hljs-number">50</span> - x^<span class="hljs-number">45</span> - x^<span class="hljs-number">42</span> + x^<span class="hljs-number">41</span> - x^<span class="hljs-number">40</span> - x^<span class="hljs-number">38</span> + x^<span class="hljs-number">37</span> - x^<span class="hljs-number">36</span> - x^<span class="hljs-number">35</span> - x^<span class="hljs-number">34</span> - x^<span class="hljs-number">32</span> - x^<span class="hljs-number">31</span> + x^<span class="hljs-number">30</span> - x^<span class="hljs-number">29</span> - x^<span class="hljs-number">27</span> + x^<span class="hljs-number">26</span> + x^<span class="hljs-number">25</span> + x^<span class="hljs-number">22</span> + x^<span class="hljs-number">20</span> - x^<span class="hljs-number">18</span> + x^<span class="hljs-number">16</span> + x^<span class="hljs-number">15</span> - x^<span class="hljs-number">14</span> - x^<span class="hljs-number">13</span> + x^<span class="hljs-number">12</span> - x^<span class="hljs-number">8</span> + x^<span class="hljs-number">7</span> + x^<span class="hljs-number">6</span> - x^<span class="hljs-number">4</span> - x<br>        while True:<br>            try:<br>                self<span class="hljs-selector-class">.f</span> = <span class="hljs-built_in">random_poly</span>(self<span class="hljs-selector-class">.N</span>, d + <span class="hljs-number">1</span>, d)<br>                # self<span class="hljs-selector-class">.f</span> = x^<span class="hljs-number">119</span> + x^<span class="hljs-number">117</span> + x^<span class="hljs-number">114</span> - x^<span class="hljs-number">113</span> - x^<span class="hljs-number">112</span> - x^<span class="hljs-number">110</span> - x^<span class="hljs-number">109</span> + x^<span class="hljs-number">108</span> + x^<span class="hljs-number">107</span> - x^<span class="hljs-number">106</span> - x^<span class="hljs-number">103</span> - x^<span class="hljs-number">102</span> + x^<span class="hljs-number">100</span> + x^<span class="hljs-number">98</span> + x^<span class="hljs-number">97</span> + x^<span class="hljs-number">96</span> - x^<span class="hljs-number">93</span> + x^<span class="hljs-number">92</span> + x^<span class="hljs-number">91</span> - x^<span class="hljs-number">87</span> + x^<span class="hljs-number">85</span> - x^<span class="hljs-number">81</span> + x^<span class="hljs-number">80</span> - x^<span class="hljs-number">75</span> - x^<span class="hljs-number">73</span> + x^<span class="hljs-number">72</span> - x^<span class="hljs-number">71</span> + x^<span class="hljs-number">68</span> - x^<span class="hljs-number">67</span> - x^<span class="hljs-number">66</span> - x^<span class="hljs-number">62</span> - x^<span class="hljs-number">60</span> - x^<span class="hljs-number">57</span> + x^<span class="hljs-number">52</span> - x^<span class="hljs-number">51</span> + x^<span class="hljs-number">50</span> - x^<span class="hljs-number">48</span> + x^<span class="hljs-number">45</span> - x^<span class="hljs-number">43</span> - x^<span class="hljs-number">42</span> - x^<span class="hljs-number">38</span> + x^<span class="hljs-number">37</span> - x^<span class="hljs-number">34</span> + x^<span class="hljs-number">31</span> + x^<span class="hljs-number">30</span> - x^<span class="hljs-number">26</span> + x^<span class="hljs-number">24</span> + x^<span class="hljs-number">22</span> - x^<span class="hljs-number">21</span> + x^<span class="hljs-number">20</span> - x^<span class="hljs-number">17</span> + x^<span class="hljs-number">16</span> - x^<span class="hljs-number">14</span> - x^<span class="hljs-number">13</span> + x^<span class="hljs-number">12</span> + x^<span class="hljs-number">10</span> + x^<span class="hljs-number">8</span> + x^<span class="hljs-number">7</span> + x^<span class="hljs-number">6</span> - x^<span class="hljs-number">5</span> + x<br>                self<span class="hljs-selector-class">.fp</span> = <span class="hljs-built_in">invert_poly_mod_prime</span>(self<span class="hljs-selector-class">.f</span>, self<span class="hljs-selector-class">.R</span>, self.p)<br>                self<span class="hljs-selector-class">.fq</span> = <span class="hljs-built_in">invert_poly_mod_powerof2</span>(self<span class="hljs-selector-class">.f</span>, self<span class="hljs-selector-class">.R</span>, self.q)<br>                break<br>            except:<br>                pass<br><br>        self<span class="hljs-selector-class">.h</span> = <span class="hljs-built_in">balancedmod</span>(self<span class="hljs-selector-class">.p</span> * <span class="hljs-built_in">convolution</span>(self<span class="hljs-selector-class">.fq</span>, self<span class="hljs-selector-class">.g</span>, self.R), self<span class="hljs-selector-class">.q</span>, self.R)<br>    def <span class="hljs-built_in">getPubKey</span>(self):<br>        return self<span class="hljs-selector-class">.h</span><br>    def <span class="hljs-built_in">encrypt</span>(self, m):<br>        r = <span class="hljs-built_in">random_poly</span>(self<span class="hljs-selector-class">.N</span>, self<span class="hljs-selector-class">.d</span>, self.d)<br>        return <span class="hljs-built_in">balancedmod</span>(<span class="hljs-built_in">convolution</span>(self<span class="hljs-selector-class">.h</span>, r, self.R) + m, self<span class="hljs-selector-class">.q</span>, self.R)<br><br>    def <span class="hljs-built_in">decrypt</span>(self, c):<br>        <span class="hljs-selector-tag">a</span> = <span class="hljs-built_in">balancedmod</span>(<span class="hljs-built_in">convolution</span>(c, self<span class="hljs-selector-class">.f</span>, self.R), self<span class="hljs-selector-class">.q</span>, self.R)<br>        return <span class="hljs-built_in">balancedmod</span>(<span class="hljs-built_in">convolution</span>(<span class="hljs-selector-tag">a</span>, self<span class="hljs-selector-class">.fp</span>, self.R), self<span class="hljs-selector-class">.p</span>, self.R)<br><br>    def <span class="hljs-built_in">encode</span>(self, val):<br>        poly = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.N):<br>            poly += ((val % self.p) - self<span class="hljs-selector-class">.p</span> <span class="hljs-comment">// 2) * (x ** i)</span><br>            val <span class="hljs-comment">//= self.p</span><br>        return poly<br><br>    def <span class="hljs-built_in">decode</span>(self, poly):<br>        result = <span class="hljs-number">0</span><br>        ll = poly<span class="hljs-selector-class">.list</span>()<br>        <span class="hljs-keyword">for</span> idx, val <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(ll):<br>            result += (val + self<span class="hljs-selector-class">.p</span> <span class="hljs-comment">// 2) * (self.p ** idx)</span><br>        return result<br><br>    def <span class="hljs-built_in">poly_from_list</span>(self, l: list):<br>        return <span class="hljs-built_in">Zx</span>(l)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    N = <span class="hljs-number">160</span><br>    d = <span class="hljs-number">30</span><br>    <span class="hljs-selector-tag">p</span> = <span class="hljs-number">3</span><br>    <span class="hljs-selector-tag">q</span> = <span class="hljs-number">65536</span><br><br>    flag = b<span class="hljs-string">&#x27;cnss&#123;&#125;&#x27;</span><br>    cipher = <span class="hljs-built_in">NTRUCipher</span>(N, <span class="hljs-selector-tag">p</span>, <span class="hljs-selector-tag">q</span>, d)<br>    # cipher<span class="hljs-selector-class">.f</span> = x^<span class="hljs-number">31</span> - x^<span class="hljs-number">29</span> + x^<span class="hljs-number">28</span> - x^<span class="hljs-number">27</span> + x^<span class="hljs-number">26</span> + x^<span class="hljs-number">25</span> + x^<span class="hljs-number">24</span> + x^<span class="hljs-number">23</span> + x^<span class="hljs-number">22</span> - x^<span class="hljs-number">21</span> - x^<span class="hljs-number">19</span> - x^<span class="hljs-number">18</span> + x^<span class="hljs-number">17</span> - x^<span class="hljs-number">15</span> - x^<span class="hljs-number">14</span> - x^<span class="hljs-number">11</span> - x^<span class="hljs-number">9</span> + x^<span class="hljs-number">8</span> - x^<span class="hljs-number">6</span> + x^<span class="hljs-number">2</span> + x<br>    # cipher<span class="hljs-selector-class">.g</span> = -x^<span class="hljs-number">31</span> - x^<span class="hljs-number">30</span> - x^<span class="hljs-number">29</span> - x^<span class="hljs-number">28</span> + x^<span class="hljs-number">27</span> + x^<span class="hljs-number">25</span> - x^<span class="hljs-number">23</span> + x^<span class="hljs-number">22</span> + x^<span class="hljs-number">21</span> - x^<span class="hljs-number">19</span> + x^<span class="hljs-number">18</span> + x^<span class="hljs-number">15</span> - x^<span class="hljs-number">13</span> + x^<span class="hljs-number">11</span> - x^<span class="hljs-number">10</span> - x^<span class="hljs-number">9</span> + x^<span class="hljs-number">6</span> - x^<span class="hljs-number">5</span> + x^<span class="hljs-number">2</span> + x<br>    <br>    # <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[Pk]---------&quot;</span>)<br>    h = cipher<span class="hljs-selector-class">.getPubKey</span>()<br>    msg = <span class="hljs-built_in">bytes_to_long</span>(flag)<br>    encode_msg = cipher<span class="hljs-selector-class">.encode</span>(msg)<br>    c = cipher<span class="hljs-selector-class">.encrypt</span>(encode_msg)<br>    # <span class="hljs-built_in">print</span>(f<span class="hljs-string">&#x27;c=&#123;c&#125;&#x27;</span>)<br>    mm = cipher<span class="hljs-selector-class">.decrypt</span>(c)<br>    decode_msg = cipher<span class="hljs-selector-class">.decode</span>(mm)<br>    assert decode_msg == msg<br></code></pre></td></tr></table></figure><h3 id="2-格攻击">2.格攻击</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs stylus">Zx = <span class="hljs-built_in">PolynomialRing</span>(ZZ, <span class="hljs-string">&#x27;x&#x27;</span>)<br>x = Zx<span class="hljs-selector-class">.gen</span>()<br><br>N = <span class="hljs-number">160</span><br>d = <span class="hljs-number">40</span><br><span class="hljs-selector-tag">p</span> = <span class="hljs-number">3</span><br><span class="hljs-selector-tag">q</span> = <span class="hljs-number">65536</span><br><br>R = x ** N - <span class="hljs-number">1</span><br>h = -<span class="hljs-number">31082</span>*x^<span class="hljs-number">159</span> - <span class="hljs-number">14617</span>*x^<span class="hljs-number">158</span> + <span class="hljs-number">19918</span>*x^<span class="hljs-number">157</span> - <span class="hljs-number">8036</span>*x^<span class="hljs-number">156</span> + <span class="hljs-number">10147</span>*x^<span class="hljs-number">155</span> + <span class="hljs-number">5021</span>*x^<span class="hljs-number">154</span> - <span class="hljs-number">17815</span>*x^<span class="hljs-number">153</span> + <span class="hljs-number">10103</span>*x^<span class="hljs-number">152</span> + <span class="hljs-number">16807</span>*x^<span class="hljs-number">151</span> + <span class="hljs-number">24567</span>*x^<span class="hljs-number">150</span> - <span class="hljs-number">32433</span>*x^<span class="hljs-number">149</span> - <span class="hljs-number">703</span>*x^<span class="hljs-number">148</span> + <span class="hljs-number">28524</span>*x^<span class="hljs-number">147</span> - <span class="hljs-number">13881</span>*x^<span class="hljs-number">146</span> + <span class="hljs-number">11259</span>*x^<span class="hljs-number">145</span> - <span class="hljs-number">29004</span>*x^<span class="hljs-number">144</span> - <span class="hljs-number">14694</span>*x^<span class="hljs-number">143</span> + <span class="hljs-number">26176</span>*x^<span class="hljs-number">142</span> + <span class="hljs-number">6530</span>*x^<span class="hljs-number">141</span> - <span class="hljs-number">4860</span>*x^<span class="hljs-number">140</span> - <span class="hljs-number">28793</span>*x^<span class="hljs-number">139</span> + <span class="hljs-number">24449</span>*x^<span class="hljs-number">138</span> + <span class="hljs-number">4066</span>*x^<span class="hljs-number">137</span> - <span class="hljs-number">14562</span>*x^<span class="hljs-number">136</span> - <span class="hljs-number">27298</span>*x^<span class="hljs-number">135</span> + <span class="hljs-number">28889</span>*x^<span class="hljs-number">134</span> + <span class="hljs-number">21079</span>*x^<span class="hljs-number">133</span> + <span class="hljs-number">21872</span>*x^<span class="hljs-number">132</span> + <span class="hljs-number">25410</span>*x^<span class="hljs-number">131</span> + <span class="hljs-number">3974</span>*x^<span class="hljs-number">130</span> + <span class="hljs-number">24782</span>*x^<span class="hljs-number">129</span> - <span class="hljs-number">15777</span>*x^<span class="hljs-number">128</span> - <span class="hljs-number">16591</span>*x^<span class="hljs-number">127</span> - <span class="hljs-number">30704</span>*x^<span class="hljs-number">126</span> + <span class="hljs-number">4323</span>*x^<span class="hljs-number">125</span> - <span class="hljs-number">18939</span>*x^<span class="hljs-number">124</span> - <span class="hljs-number">15416</span>*x^<span class="hljs-number">123</span> - <span class="hljs-number">18393</span>*x^<span class="hljs-number">122</span> - <span class="hljs-number">23652</span>*x^<span class="hljs-number">121</span> + <span class="hljs-number">15108</span>*x^<span class="hljs-number">120</span> - <span class="hljs-number">27891</span>*x^<span class="hljs-number">119</span> + <span class="hljs-number">2678</span>*x^<span class="hljs-number">118</span> + <span class="hljs-number">10772</span>*x^<span class="hljs-number">117</span> - <span class="hljs-number">427</span>*x^<span class="hljs-number">116</span> - <span class="hljs-number">26667</span>*x^<span class="hljs-number">115</span> - <span class="hljs-number">25516</span>*x^<span class="hljs-number">114</span> - <span class="hljs-number">6688</span>*x^<span class="hljs-number">113</span> + <span class="hljs-number">28600</span>*x^<span class="hljs-number">112</span> - <span class="hljs-number">18337</span>*x^<span class="hljs-number">111</span> - <span class="hljs-number">12960</span>*x^<span class="hljs-number">110</span> - <span class="hljs-number">21229</span>*x^<span class="hljs-number">109</span> - <span class="hljs-number">27071</span>*x^<span class="hljs-number">108</span> - <span class="hljs-number">1122</span>*x^<span class="hljs-number">107</span> - <span class="hljs-number">30649</span>*x^<span class="hljs-number">106</span> - <span class="hljs-number">25769</span>*x^<span class="hljs-number">105</span> - <span class="hljs-number">26115</span>*x^<span class="hljs-number">104</span> - <span class="hljs-number">5834</span>*x^<span class="hljs-number">103</span> + <span class="hljs-number">14995</span>*x^<span class="hljs-number">102</span> + <span class="hljs-number">19029</span>*x^<span class="hljs-number">101</span> - <span class="hljs-number">22440</span>*x^<span class="hljs-number">100</span> + <span class="hljs-number">1664</span>*x^<span class="hljs-number">99</span> + <span class="hljs-number">9560</span>*x^<span class="hljs-number">98</span> - <span class="hljs-number">25381</span>*x^<span class="hljs-number">97</span> + <span class="hljs-number">20032</span>*x^<span class="hljs-number">96</span> - <span class="hljs-number">18057</span>*x^<span class="hljs-number">95</span> - <span class="hljs-number">17361</span>*x^<span class="hljs-number">94</span> + <span class="hljs-number">12687</span>*x^<span class="hljs-number">93</span> + <span class="hljs-number">1236</span>*x^<span class="hljs-number">92</span> - <span class="hljs-number">9883</span>*x^<span class="hljs-number">91</span> + <span class="hljs-number">29129</span>*x^<span class="hljs-number">90</span> + <span class="hljs-number">3807</span>*x^<span class="hljs-number">89</span> + <span class="hljs-number">12829</span>*x^<span class="hljs-number">88</span> - <span class="hljs-number">20639</span>*x^<span class="hljs-number">87</span> - <span class="hljs-number">11764</span>*x^<span class="hljs-number">86</span> - <span class="hljs-number">25030</span>*x^<span class="hljs-number">85</span> + <span class="hljs-number">15743</span>*x^<span class="hljs-number">84</span> - <span class="hljs-number">3589</span>*x^<span class="hljs-number">83</span> - <span class="hljs-number">1436</span>*x^<span class="hljs-number">82</span> + <span class="hljs-number">21181</span>*x^<span class="hljs-number">81</span> + <span class="hljs-number">13943</span>*x^<span class="hljs-number">80</span> + <span class="hljs-number">31511</span>*x^<span class="hljs-number">79</span> - <span class="hljs-number">19732</span>*x^<span class="hljs-number">78</span> + <span class="hljs-number">6337</span>*x^<span class="hljs-number">77</span> + <span class="hljs-number">22965</span>*x^<span class="hljs-number">76</span> - <span class="hljs-number">23698</span>*x^<span class="hljs-number">75</span> + <span class="hljs-number">10601</span>*x^<span class="hljs-number">74</span> + <span class="hljs-number">8477</span>*x^<span class="hljs-number">73</span> - <span class="hljs-number">31571</span>*x^<span class="hljs-number">72</span> - <span class="hljs-number">27846</span>*x^<span class="hljs-number">71</span> + <span class="hljs-number">28105</span>*x^<span class="hljs-number">70</span> - <span class="hljs-number">29146</span>*x^<span class="hljs-number">69</span> - <span class="hljs-number">29142</span>*x^<span class="hljs-number">68</span> - <span class="hljs-number">32182</span>*x^<span class="hljs-number">67</span> - <span class="hljs-number">11087</span>*x^<span class="hljs-number">66</span> + <span class="hljs-number">6757</span>*x^<span class="hljs-number">65</span> + <span class="hljs-number">16893</span>*x^<span class="hljs-number">64</span> - <span class="hljs-number">30174</span>*x^<span class="hljs-number">63</span> + <span class="hljs-number">1756</span>*x^<span class="hljs-number">62</span> - <span class="hljs-number">14660</span>*x^<span class="hljs-number">61</span> + <span class="hljs-number">24670</span>*x^<span class="hljs-number">60</span> + <span class="hljs-number">9178</span>*x^<span class="hljs-number">59</span> + <span class="hljs-number">25364</span>*x^<span class="hljs-number">58</span> - <span class="hljs-number">15133</span>*x^<span class="hljs-number">57</span> - <span class="hljs-number">6543</span>*x^<span class="hljs-number">56</span> + <span class="hljs-number">2235</span>*x^<span class="hljs-number">55</span> + <span class="hljs-number">22861</span>*x^<span class="hljs-number">54</span> + <span class="hljs-number">26487</span>*x^<span class="hljs-number">53</span> + <span class="hljs-number">1703</span>*x^<span class="hljs-number">52</span> + <span class="hljs-number">15899</span>*x^<span class="hljs-number">51</span> + <span class="hljs-number">8163</span>*x^<span class="hljs-number">50</span> - <span class="hljs-number">16708</span>*x^<span class="hljs-number">49</span> - <span class="hljs-number">4605</span>*x^<span class="hljs-number">48</span> - <span class="hljs-number">27949</span>*x^<span class="hljs-number">47</span> - <span class="hljs-number">4871</span>*x^<span class="hljs-number">46</span> + <span class="hljs-number">1192</span>*x^<span class="hljs-number">45</span> - <span class="hljs-number">415</span>*x^<span class="hljs-number">44</span> + <span class="hljs-number">20678</span>*x^<span class="hljs-number">43</span> + <span class="hljs-number">21537</span>*x^<span class="hljs-number">42</span> + <span class="hljs-number">17271</span>*x^<span class="hljs-number">41</span> + <span class="hljs-number">8947</span>*x^<span class="hljs-number">40</span> + <span class="hljs-number">31942</span>*x^<span class="hljs-number">39</span> - <span class="hljs-number">25564</span>*x^<span class="hljs-number">38</span> - <span class="hljs-number">3313</span>*x^<span class="hljs-number">37</span> - <span class="hljs-number">28654</span>*x^<span class="hljs-number">36</span> - <span class="hljs-number">24128</span>*x^<span class="hljs-number">35</span> + <span class="hljs-number">28209</span>*x^<span class="hljs-number">34</span> - <span class="hljs-number">24904</span>*x^<span class="hljs-number">33</span> + <span class="hljs-number">764</span>*x^<span class="hljs-number">32</span> - <span class="hljs-number">14770</span>*x^<span class="hljs-number">31</span> + <span class="hljs-number">27748</span>*x^<span class="hljs-number">30</span> + <span class="hljs-number">20821</span>*x^<span class="hljs-number">29</span> - <span class="hljs-number">16078</span>*x^<span class="hljs-number">28</span> - <span class="hljs-number">29480</span>*x^<span class="hljs-number">27</span> + <span class="hljs-number">4958</span>*x^<span class="hljs-number">26</span> + <span class="hljs-number">7593</span>*x^<span class="hljs-number">25</span> + <span class="hljs-number">10794</span>*x^<span class="hljs-number">24</span> + <span class="hljs-number">31009</span>*x^<span class="hljs-number">23</span> - <span class="hljs-number">12029</span>*x^<span class="hljs-number">22</span> + <span class="hljs-number">9734</span>*x^<span class="hljs-number">21</span> + <span class="hljs-number">21313</span>*x^<span class="hljs-number">20</span> - <span class="hljs-number">28660</span>*x^<span class="hljs-number">19</span> - <span class="hljs-number">21860</span>*x^<span class="hljs-number">18</span> + <span class="hljs-number">23568</span>*x^<span class="hljs-number">17</span> - <span class="hljs-number">29022</span>*x^<span class="hljs-number">16</span> + <span class="hljs-number">24796</span>*x^<span class="hljs-number">15</span> + <span class="hljs-number">3138</span>*x^<span class="hljs-number">14</span> - <span class="hljs-number">3758</span>*x^<span class="hljs-number">13</span> + <span class="hljs-number">12681</span>*x^<span class="hljs-number">12</span> - <span class="hljs-number">11138</span>*x^<span class="hljs-number">11</span> + <span class="hljs-number">22079</span>*x^<span class="hljs-number">10</span> + <span class="hljs-number">10426</span>*x^<span class="hljs-number">9</span> - <span class="hljs-number">25911</span>*x^<span class="hljs-number">8</span> - <span class="hljs-number">10304</span>*x^<span class="hljs-number">7</span> - <span class="hljs-number">19399</span>*x^<span class="hljs-number">6</span> + <span class="hljs-number">21475</span>*x^<span class="hljs-number">5</span> + <span class="hljs-number">6728</span>*x^<span class="hljs-number">4</span> - <span class="hljs-number">22420</span>*x^<span class="hljs-number">3</span> - <span class="hljs-number">11358</span>*x^<span class="hljs-number">2</span> + <span class="hljs-number">2746</span>*x + <span class="hljs-number">2175</span><br>c = <span class="hljs-number">827</span>*x^<span class="hljs-number">159</span> - <span class="hljs-number">28788</span>*x^<span class="hljs-number">158</span> + <span class="hljs-number">11676</span>*x^<span class="hljs-number">157</span> - <span class="hljs-number">9492</span>*x^<span class="hljs-number">156</span> - <span class="hljs-number">15856</span>*x^<span class="hljs-number">155</span> - <span class="hljs-number">19059</span>*x^<span class="hljs-number">154</span> + <span class="hljs-number">6551</span>*x^<span class="hljs-number">153</span> + <span class="hljs-number">7457</span>*x^<span class="hljs-number">152</span> + <span class="hljs-number">3018</span>*x^<span class="hljs-number">151</span> - <span class="hljs-number">3351</span>*x^<span class="hljs-number">150</span> - <span class="hljs-number">25905</span>*x^<span class="hljs-number">149</span> + <span class="hljs-number">27240</span>*x^<span class="hljs-number">148</span> + <span class="hljs-number">24667</span>*x^<span class="hljs-number">147</span> + <span class="hljs-number">13367</span>*x^<span class="hljs-number">146</span> + <span class="hljs-number">10679</span>*x^<span class="hljs-number">145</span> + <span class="hljs-number">4797</span>*x^<span class="hljs-number">144</span> + <span class="hljs-number">32097</span>*x^<span class="hljs-number">143</span> + <span class="hljs-number">11718</span>*x^<span class="hljs-number">142</span> + <span class="hljs-number">7061</span>*x^<span class="hljs-number">141</span> - <span class="hljs-number">1948</span>*x^<span class="hljs-number">140</span> - <span class="hljs-number">11412</span>*x^<span class="hljs-number">139</span> - <span class="hljs-number">23573</span>*x^<span class="hljs-number">138</span> + <span class="hljs-number">28496</span>*x^<span class="hljs-number">137</span> + <span class="hljs-number">32132</span>*x^<span class="hljs-number">136</span> + <span class="hljs-number">5327</span>*x^<span class="hljs-number">135</span> + <span class="hljs-number">30416</span>*x^<span class="hljs-number">134</span> + <span class="hljs-number">6158</span>*x^<span class="hljs-number">133</span> - <span class="hljs-number">20550</span>*x^<span class="hljs-number">132</span> + <span class="hljs-number">18201</span>*x^<span class="hljs-number">131</span> + <span class="hljs-number">21081</span>*x^<span class="hljs-number">130</span> + <span class="hljs-number">21076</span>*x^<span class="hljs-number">129</span> - <span class="hljs-number">22003</span>*x^<span class="hljs-number">128</span> + <span class="hljs-number">22761</span>*x^<span class="hljs-number">127</span> - <span class="hljs-number">20067</span>*x^<span class="hljs-number">126</span> - <span class="hljs-number">28503</span>*x^<span class="hljs-number">125</span> + <span class="hljs-number">14044</span>*x^<span class="hljs-number">124</span> + <span class="hljs-number">14657</span>*x^<span class="hljs-number">123</span> - <span class="hljs-number">19561</span>*x^<span class="hljs-number">122</span> + <span class="hljs-number">15105</span>*x^<span class="hljs-number">121</span> - <span class="hljs-number">13874</span>*x^<span class="hljs-number">120</span> + <span class="hljs-number">4391</span>*x^<span class="hljs-number">119</span> + <span class="hljs-number">10027</span>*x^<span class="hljs-number">118</span> - <span class="hljs-number">5434</span>*x^<span class="hljs-number">117</span> + <span class="hljs-number">5853</span>*x^<span class="hljs-number">116</span> - <span class="hljs-number">28767</span>*x^<span class="hljs-number">115</span> - <span class="hljs-number">20771</span>*x^<span class="hljs-number">114</span> - <span class="hljs-number">32534</span>*x^<span class="hljs-number">113</span> - <span class="hljs-number">28131</span>*x^<span class="hljs-number">112</span> - <span class="hljs-number">14639</span>*x^<span class="hljs-number">111</span> + <span class="hljs-number">30551</span>*x^<span class="hljs-number">110</span> - <span class="hljs-number">5851</span>*x^<span class="hljs-number">109</span> + <span class="hljs-number">12912</span>*x^<span class="hljs-number">108</span> + <span class="hljs-number">9832</span>*x^<span class="hljs-number">107</span> - <span class="hljs-number">27307</span>*x^<span class="hljs-number">106</span> + <span class="hljs-number">31912</span>*x^<span class="hljs-number">105</span> + <span class="hljs-number">12445</span>*x^<span class="hljs-number">104</span> - <span class="hljs-number">13595</span>*x^<span class="hljs-number">103</span> + <span class="hljs-number">180</span>*x^<span class="hljs-number">102</span> - <span class="hljs-number">28864</span>*x^<span class="hljs-number">101</span> + <span class="hljs-number">2697</span>*x^<span class="hljs-number">100</span> - <span class="hljs-number">10658</span>*x^<span class="hljs-number">99</span> - <span class="hljs-number">6828</span>*x^<span class="hljs-number">98</span> + <span class="hljs-number">28310</span>*x^<span class="hljs-number">97</span> - <span class="hljs-number">25950</span>*x^<span class="hljs-number">96</span> + <span class="hljs-number">2790</span>*x^<span class="hljs-number">95</span> + <span class="hljs-number">5194</span>*x^<span class="hljs-number">94</span> + <span class="hljs-number">21198</span>*x^<span class="hljs-number">93</span> - <span class="hljs-number">18733</span>*x^<span class="hljs-number">92</span> - <span class="hljs-number">25159</span>*x^<span class="hljs-number">91</span> - <span class="hljs-number">8584</span>*x^<span class="hljs-number">90</span> + <span class="hljs-number">637</span>*x^<span class="hljs-number">89</span> - <span class="hljs-number">30097</span>*x^<span class="hljs-number">88</span> - <span class="hljs-number">27323</span>*x^<span class="hljs-number">87</span> + <span class="hljs-number">19035</span>*x^<span class="hljs-number">86</span> + <span class="hljs-number">16007</span>*x^<span class="hljs-number">85</span> + <span class="hljs-number">3098</span>*x^<span class="hljs-number">84</span> + <span class="hljs-number">30858</span>*x^<span class="hljs-number">83</span> + <span class="hljs-number">2395</span>*x^<span class="hljs-number">82</span> + <span class="hljs-number">26950</span>*x^<span class="hljs-number">81</span> - <span class="hljs-number">23633</span>*x^<span class="hljs-number">80</span> - <span class="hljs-number">18422</span>*x^<span class="hljs-number">79</span> + <span class="hljs-number">20408</span>*x^<span class="hljs-number">78</span> - <span class="hljs-number">25472</span>*x^<span class="hljs-number">77</span> - <span class="hljs-number">12691</span>*x^<span class="hljs-number">76</span> - <span class="hljs-number">9347</span>*x^<span class="hljs-number">75</span> - <span class="hljs-number">24963</span>*x^<span class="hljs-number">74</span> - <span class="hljs-number">30570</span>*x^<span class="hljs-number">73</span> + <span class="hljs-number">16046</span>*x^<span class="hljs-number">72</span> + <span class="hljs-number">21716</span>*x^<span class="hljs-number">71</span> - <span class="hljs-number">20667</span>*x^<span class="hljs-number">70</span> - <span class="hljs-number">5193</span>*x^<span class="hljs-number">69</span> + <span class="hljs-number">7870</span>*x^<span class="hljs-number">68</span> + <span class="hljs-number">3035</span>*x^<span class="hljs-number">67</span> - <span class="hljs-number">10604</span>*x^<span class="hljs-number">66</span> + <span class="hljs-number">1072</span>*x^<span class="hljs-number">65</span> - <span class="hljs-number">13541</span>*x^<span class="hljs-number">64</span> - <span class="hljs-number">24707</span>*x^<span class="hljs-number">63</span> - <span class="hljs-number">30203</span>*x^<span class="hljs-number">62</span> + <span class="hljs-number">192</span>*x^<span class="hljs-number">61</span> - <span class="hljs-number">9920</span>*x^<span class="hljs-number">60</span> - <span class="hljs-number">26149</span>*x^<span class="hljs-number">59</span> - <span class="hljs-number">6387</span>*x^<span class="hljs-number">58</span> - <span class="hljs-number">25086</span>*x^<span class="hljs-number">57</span> + <span class="hljs-number">29876</span>*x^<span class="hljs-number">56</span> - <span class="hljs-number">7267</span>*x^<span class="hljs-number">55</span> - <span class="hljs-number">20927</span>*x^<span class="hljs-number">54</span> - <span class="hljs-number">15841</span>*x^<span class="hljs-number">53</span> - <span class="hljs-number">14910</span>*x^<span class="hljs-number">52</span> - <span class="hljs-number">30501</span>*x^<span class="hljs-number">51</span> + <span class="hljs-number">14929</span>*x^<span class="hljs-number">50</span> - <span class="hljs-number">5987</span>*x^<span class="hljs-number">49</span> + <span class="hljs-number">2002</span>*x^<span class="hljs-number">48</span> - <span class="hljs-number">20599</span>*x^<span class="hljs-number">47</span> - <span class="hljs-number">13489</span>*x^<span class="hljs-number">46</span> - <span class="hljs-number">26459</span>*x^<span class="hljs-number">45</span> + <span class="hljs-number">26335</span>*x^<span class="hljs-number">44</span> + <span class="hljs-number">26597</span>*x^<span class="hljs-number">43</span> - <span class="hljs-number">30213</span>*x^<span class="hljs-number">42</span> + <span class="hljs-number">8866</span>*x^<span class="hljs-number">41</span> + <span class="hljs-number">18173</span>*x^<span class="hljs-number">40</span> - <span class="hljs-number">3975</span>*x^<span class="hljs-number">39</span> - <span class="hljs-number">15388</span>*x^<span class="hljs-number">38</span> - <span class="hljs-number">5311</span>*x^<span class="hljs-number">37</span> - <span class="hljs-number">19972</span>*x^<span class="hljs-number">36</span> - <span class="hljs-number">9169</span>*x^<span class="hljs-number">35</span> - <span class="hljs-number">17439</span>*x^<span class="hljs-number">34</span> - <span class="hljs-number">22100</span>*x^<span class="hljs-number">33</span> - <span class="hljs-number">22956</span>*x^<span class="hljs-number">32</span> - <span class="hljs-number">19639</span>*x^<span class="hljs-number">31</span> + <span class="hljs-number">7753</span>*x^<span class="hljs-number">30</span> - <span class="hljs-number">32440</span>*x^<span class="hljs-number">29</span> + <span class="hljs-number">14194</span>*x^<span class="hljs-number">28</span> + <span class="hljs-number">6990</span>*x^<span class="hljs-number">27</span> + <span class="hljs-number">13291</span>*x^<span class="hljs-number">26</span> + <span class="hljs-number">15908</span>*x^<span class="hljs-number">25</span> + <span class="hljs-number">20108</span>*x^<span class="hljs-number">24</span> + <span class="hljs-number">19429</span>*x^<span class="hljs-number">23</span> + <span class="hljs-number">1290</span>*x^<span class="hljs-number">22</span> + <span class="hljs-number">29204</span>*x^<span class="hljs-number">21</span> + <span class="hljs-number">10700</span>*x^<span class="hljs-number">20</span> + <span class="hljs-number">10343</span>*x^<span class="hljs-number">19</span> - <span class="hljs-number">18267</span>*x^<span class="hljs-number">18</span> - <span class="hljs-number">1314</span>*x^<span class="hljs-number">17</span> + <span class="hljs-number">6111</span>*x^<span class="hljs-number">16</span> + <span class="hljs-number">19243</span>*x^<span class="hljs-number">15</span> - <span class="hljs-number">31644</span>*x^<span class="hljs-number">14</span> - <span class="hljs-number">23278</span>*x^<span class="hljs-number">13</span> - <span class="hljs-number">14388</span>*x^<span class="hljs-number">12</span> + <span class="hljs-number">29190</span>*x^<span class="hljs-number">11</span> + <span class="hljs-number">25308</span>*x^<span class="hljs-number">10</span> + <span class="hljs-number">16840</span>*x^<span class="hljs-number">9</span> - <span class="hljs-number">31782</span>*x^<span class="hljs-number">8</span> - <span class="hljs-number">16088</span>*x^<span class="hljs-number">7</span> - <span class="hljs-number">9940</span>*x^<span class="hljs-number">6</span> + <span class="hljs-number">13891</span>*x^<span class="hljs-number">5</span> + <span class="hljs-number">15244</span>*x^<span class="hljs-number">4</span> + <span class="hljs-number">14168</span>*x^<span class="hljs-number">3</span> - <span class="hljs-number">21735</span>*x^<span class="hljs-number">2</span> - <span class="hljs-number">24052</span>*x + <span class="hljs-number">5890</span><br><br>A = <span class="hljs-built_in">Matrix</span>(ZZ, <span class="hljs-number">2</span> * N, <span class="hljs-number">2</span> * N)<br><br>hh = <span class="hljs-built_in">balancedmod</span>(<span class="hljs-built_in">inverse_mod</span>(<span class="hljs-selector-tag">p</span>, q) * h, <span class="hljs-selector-tag">q</span>, R) <br>hh = <span class="hljs-built_in">inverse_mod</span>(<span class="hljs-selector-tag">p</span>, q) * h % <span class="hljs-selector-tag">q</span><br>H = hh<span class="hljs-selector-class">.coefficients</span>(sparse=False)<br><span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N):<br>    A<span class="hljs-selector-attr">[i, i]</span> = <span class="hljs-number">1</span><br>    A<span class="hljs-selector-attr">[i+N, i+N]</span> = <span class="hljs-selector-tag">q</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N):<br>        A<span class="hljs-selector-attr">[i, j+N]</span> = H<span class="hljs-selector-attr">[-i+j]</span><br><br>C = A<span class="hljs-selector-class">.LLL</span>()<br><span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N):<br>    ff = C<span class="hljs-selector-attr">[row]</span><span class="hljs-selector-attr">[:N]</span><br>    gg = C<span class="hljs-selector-attr">[row]</span><span class="hljs-selector-attr">[N:]</span><br>    f = <span class="hljs-built_in">Zx</span>(<span class="hljs-built_in">list</span>(ff))<br>    g = <span class="hljs-built_in">Zx</span>(<span class="hljs-built_in">list</span>(gg))<br>    decrypt = <span class="hljs-built_in">NTRUCipher</span>(N, <span class="hljs-selector-tag">p</span>, <span class="hljs-selector-tag">q</span>, d)<br>    decrypt<span class="hljs-selector-class">.f</span> = f<br>    decrypt<span class="hljs-selector-class">.g</span> = g<br>    try:<br>        decrypt<span class="hljs-selector-class">.fp</span> = <span class="hljs-built_in">invert_poly_mod_prime</span>(f, R, p)<br>        decrypt<span class="hljs-selector-class">.fq</span> = <span class="hljs-built_in">invert_poly_mod_powerof2</span>(f, R, q)<br>        break<br>    except:<br>        continue<br>mm = decrypt<span class="hljs-selector-class">.decrypt</span>(c)<br>decode_msg = decrypt<span class="hljs-selector-class">.decode</span>(mm)<br><span class="hljs-function"><span class="hljs-title">long_to_bytes</span><span class="hljs-params">(decode_msg)</span></span><br></code></pre></td></tr></table></figure><h3 id="3-重复明文攻击">3.重复明文攻击</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs stylus">def <span class="hljs-built_in">balancedmod_new</span>(f,<span class="hljs-selector-tag">q</span>,quo):<br>    g = <span class="hljs-built_in">list</span>(((f<span class="hljs-selector-attr">[i]</span> + q<span class="hljs-comment">//2) % q) - q//2 for i in range(n))</span><br>    return <span class="hljs-built_in">Zx</span>(g) % quo<br><br>def <span class="hljs-built_in">convolution_new</span>(f,g,quo):<br>    return (f * g) % quo<br><br>def <span class="hljs-built_in">invertmodprime_new</span>(f,<span class="hljs-selector-tag">p</span>,quo):<br>    T = Zx<span class="hljs-selector-class">.change_ring</span>(<span class="hljs-built_in">Integers</span>(p))<span class="hljs-selector-class">.quotient</span>(quo)<br>    return <span class="hljs-built_in">Zx</span>(<span class="hljs-built_in">lift</span>(<span class="hljs-number">1</span> / <span class="hljs-built_in">T</span>(f)))<br><br>def <span class="hljs-built_in">invertmodpowerof2_new</span>(f,<span class="hljs-selector-tag">q</span>,quo):<br>    <span class="hljs-selector-id">#print</span>(f, <span class="hljs-selector-tag">q</span>, quo)<br>    assert <span class="hljs-selector-tag">q</span><span class="hljs-selector-class">.is_power_of</span>(<span class="hljs-number">2</span>)<br>    g = <span class="hljs-built_in">invertmodprime_new</span>(f,<span class="hljs-number">2</span>,quo)<br>    <span class="hljs-selector-id">#print</span>(<span class="hljs-string">&quot;g:&quot;</span>, g)<br>    while True:<br>        r = <span class="hljs-built_in">balancedmod_new</span>(<span class="hljs-built_in">convolution_new</span>(g,f,quo),<span class="hljs-selector-tag">q</span>,quo)<br>        <span class="hljs-keyword">if</span> r == <span class="hljs-number">1</span>: return g<br>        g = <span class="hljs-built_in">balancedmod_new</span>(<span class="hljs-built_in">convolution_new</span>(g,<span class="hljs-number">2</span> - r,quo),<span class="hljs-selector-tag">q</span>,quo)<br><br>        <br>def <span class="hljs-built_in">get_delta_r</span>(delta_e, factor, g):<br>    quo = (x^n-<span class="hljs-number">1</span>) <span class="hljs-comment">// factor</span><br>    h_ = h <span class="hljs-comment">// factor</span><br>    delta_e = delta_e <span class="hljs-comment">// factor</span><br>    delta_r = <span class="hljs-built_in">balancedmod_new</span>(<span class="hljs-built_in">convolution_new</span>(<span class="hljs-built_in">invertmodpowerof2_new</span>(h_, <span class="hljs-number">128</span>, quo), delta_e, quo), <span class="hljs-number">128</span>, quo)<br>    return delta_r<br>    <br>def <span class="hljs-built_in">get_r</span>(num, d):<br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, num):<br>        delta_r = <span class="hljs-selector-attr">[]</span><br>        <span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, num):<br>            <span class="hljs-keyword">if</span> <span class="hljs-selector-tag">i</span> == k:<br>                continue<br>            delta_e = eis<span class="hljs-selector-attr">[i]</span> - eis<span class="hljs-selector-attr">[k]</span><br>            delta_r<span class="hljs-selector-class">.append</span>(<span class="hljs-built_in">get_delta_r</span>(delta_e, x - <span class="hljs-number">1</span>, <span class="hljs-number">2</span>))<br>        r0 = <span class="hljs-selector-attr">[[]</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]<br>        <span class="hljs-keyword">for</span> dr <span class="hljs-keyword">in</span> delta_r:<br>            coefficient = dr<span class="hljs-selector-class">.padded_list</span>()<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(coefficient)):<br>                r0<span class="hljs-selector-attr">[j]</span><span class="hljs-selector-class">.append</span>(coefficient<span class="hljs-selector-attr">[j]</span>)<br><br>        <span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(r0)):<br>            try:<br>                r0<span class="hljs-selector-attr">[i]</span> = <span class="hljs-built_in">-max</span>(r0<span class="hljs-selector-attr">[i]</span>, key = r0<span class="hljs-selector-attr">[i]</span>.count)<br>            except:<br>                r0<span class="hljs-selector-attr">[i]</span> = <span class="hljs-number">0</span><br><br>        r_ans = <span class="hljs-built_in">Zx</span>(r0)<br>        eff = r_ans<span class="hljs-selector-class">.coefficients</span>()<br>        <span class="hljs-keyword">if</span> eff<span class="hljs-selector-class">.count</span>(<span class="hljs-number">1</span>) == d and eff<span class="hljs-selector-class">.count</span>(-<span class="hljs-number">1</span>) == d:<br>            return r_ans, k<br>    return <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br><br>def <span class="hljs-built_in">decrypt</span>():<br>    r, k = <span class="hljs-built_in">get_r</span>(num, d)<br>    msgpoly = <span class="hljs-built_in">balancedmod</span>(eis<span class="hljs-selector-attr">[k]</span> - <span class="hljs-built_in">convolution</span>(publickey,r), q)<br>    msg = <span class="hljs-built_in">decode</span>(msgpoly)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">l2b</span>(msg))<br><br><span class="hljs-function"><span class="hljs-title">decrypt</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>knowledge</category>
      
    </categories>
    
    
    <tags>
      
      <tag>lattice</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Half-GCD</title>
    <link href="/2023/01/24/Math/HalfGCD/"/>
    <url>/2023/01/24/Math/HalfGCD/</url>
    
    <content type="html"><![CDATA[<h2 id="整数内环多项式求GCD">整数内环多项式求GCD</h2><p>sage 自带的多项式GCD方法对大数环会报错，下面是Half-GCD的代码，对此进行了实现：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs stylus"># https:<span class="hljs-comment">//github.com/rkm0959/rkm0959_implements/tree/main/Half_GCD</span><br>def <span class="hljs-built_in">HGCD</span>(<span class="hljs-selector-tag">a</span>, b):<br>    <span class="hljs-keyword">if</span> <span class="hljs-number">2</span> * <span class="hljs-selector-tag">b</span><span class="hljs-selector-class">.degree</span>() &lt;= <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.degree</span>() or <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.degree</span>() == <span class="hljs-number">1</span>:<br>        return <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span><br>    x = <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.parent</span>()<span class="hljs-selector-class">.gen</span>()<br>    m = <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.degree</span>() <span class="hljs-comment">// 2</span><br>    a_top, a_bot = <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.quo_rem</span>(x**m)<br>    b_top, b_bot = <span class="hljs-selector-tag">b</span><span class="hljs-selector-class">.quo_rem</span>(x**m)<br>    R00, R01, R10, R11 = <span class="hljs-built_in">HGCD</span>(a_top, b_top)<br>    c = R00 * <span class="hljs-selector-tag">a</span> + R01 * <span class="hljs-selector-tag">b</span><br>    d = R10 * <span class="hljs-selector-tag">a</span> + R11 * <span class="hljs-selector-tag">b</span><br>    <span class="hljs-selector-tag">q</span>, e = c<span class="hljs-selector-class">.quo_rem</span>(d)<br>    d_top, d_bot = d<span class="hljs-selector-class">.quo_rem</span>(x ** (m <span class="hljs-comment">// 2))</span><br>    e_top, e_bot = e<span class="hljs-selector-class">.quo_rem</span>(x ** (m <span class="hljs-comment">// 2))</span><br>    S00, S01, S10, S11 = <span class="hljs-built_in">HGCD</span>(d_top, e_top)<br>    RET00 = S01 * R00 + (S00 - <span class="hljs-selector-tag">q</span> * S01) * R10<br>    RET01 = S01 * R01 + (S00 - <span class="hljs-selector-tag">q</span> * S01) * R11<br>    RET10 = S11 * R00 + (S10 - <span class="hljs-selector-tag">q</span> * S11) * R10<br>    RET11 = S11 * R01 + (S10 - <span class="hljs-selector-tag">q</span> * S11) * R11<br>    return RET00, RET01, RET10, RET11<br><br><br>def <span class="hljs-built_in">GCD</span>(<span class="hljs-selector-tag">a</span>, b):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.degree</span>(), <span class="hljs-selector-tag">b</span><span class="hljs-selector-class">.degree</span>())<br>    <span class="hljs-selector-tag">q</span>, r = <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.quo_rem</span>(b)<br>    <span class="hljs-keyword">if</span> r == <span class="hljs-number">0</span>:<br>        return <span class="hljs-selector-tag">b</span><br>    R00, R01, R10, R11 = <span class="hljs-built_in">HGCD</span>(<span class="hljs-selector-tag">a</span>, b)<br>    c = R00 * <span class="hljs-selector-tag">a</span> + R01 * <span class="hljs-selector-tag">b</span><br>    d = R10 * <span class="hljs-selector-tag">a</span> + R11 * <span class="hljs-selector-tag">b</span><br>    <span class="hljs-keyword">if</span> d == <span class="hljs-number">0</span>:<br>        return c<span class="hljs-selector-class">.monic</span>()<br>    <span class="hljs-selector-tag">q</span>, r = c<span class="hljs-selector-class">.quo_rem</span>(d)<br>    <span class="hljs-keyword">if</span> r == <span class="hljs-number">0</span>:<br>        return d<br>    return <span class="hljs-built_in">GCD</span>(d, r)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>knowledge</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Math</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>结式的计算方法</title>
    <link href="/2023/01/22/Math/resultant/"/>
    <url>/2023/01/22/Math/resultant/</url>
    
    <content type="html"><![CDATA[<h1>结式计算</h1><p>结式，是用来判断两个多项式之间是否互素的一种方式。</p><p>对于给定的多项式 $f(x,y),g(x,y)$ ，如果 $gcd(f,g)!=1$，那么 $f,g$ 的结式为0。</p><p>有如下三种方式计算 $res_x(f,g) $。</p><h2 id="1-sylvester-matrix">1.sylvester_matrix</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">h = f<span class="hljs-selector-class">.sylvester_matrix</span>(g, x)<span class="hljs-selector-class">.det</span>()<span class="hljs-selector-class">.univariate_polynomial</span>()<span class="hljs-selector-class">.monic</span>()<br></code></pre></td></tr></table></figure><h2 id="2-resultant">2.resultant</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">P.&lt;x, y&gt; = <span class="hljs-built_in">PolynomialRing</span>(ZZ)<br>f<span class="hljs-selector-class">.resultant</span>(g, x)<span class="hljs-selector-class">.univariate_polynomial</span>()<span class="hljs-selector-class">.change_ring</span>(<span class="hljs-built_in">Zmod</span>(n))<span class="hljs-selector-class">.monic</span>()<br></code></pre></td></tr></table></figure><h2 id="3-groebner-basis">3.groebner basis</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">P = <span class="hljs-built_in">Zmod</span>(n)<span class="hljs-selector-attr">[<span class="hljs-string">&quot;x, y&quot;</span>]</span><br>I = <span class="hljs-built_in">ideal</span>(<span class="hljs-selector-attr">[g, f]</span>)<br>I<span class="hljs-selector-class">.groebner_basis</span>()<span class="hljs-selector-attr">[0]</span><span class="hljs-selector-class">.univariate_polynomial</span>()<span class="hljs-selector-class">.monic</span>()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>knowledge</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Math</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Singular Curves</title>
    <link href="/2023/01/11/elliptic%20curve/Singular%20Curves/"/>
    <url>/2023/01/11/elliptic%20curve/Singular%20Curves/</url>
    
    <content type="html"><![CDATA[<h2 id="奇异椭圆定义">奇异椭圆定义</h2><p>从代数上来说，如果椭圆曲线方程 $y^2=x^3+Ax+B$ 的判别式 $\Delta=4A^3+27B^2=0$ ，那么该椭圆就是奇异的。从几何图像上来看，就是椭圆曲线关于 $x$ 轴的交点有重根，这是因为 $((r_1-r_2)(r_1-r_3)(r_2-r_3))^2=-\Delta$ ,其中 $r_1,r_2,r_3$ 为交点横坐标。</p><h2 id="两种奇异椭圆曲线">两种奇异椭圆曲线</h2><p>接下来研究两种简单的奇异椭圆，本文主要就是对它们与其他域的同态进行讨论。</p><h3 id="1-y-2-x-3">1.y^2=x^3</h3><p>针对这种椭圆曲线，是构造同态：<br>$$<br>E(K)\rightarrow K , \quad (x, y) \mapsto \frac{x}{y}<br>$$<br>两边都为域$K$中的加群。</p><p>可以证明，如果 $(x_1,y_1)+(x_2,y_2)=(x_3,y_3)$ ，就有 $t_1+t_2=t_3$ ，$t_i=x_i/y_i$ 。</p><h3 id="2-y-2-x-2-x-a">2.y^2=x^2(x+a)</h3><p>这种情况的同态稍微有点复杂。记 $\alpha ^2=a$ ，考虑同态：<br>$$<br>\psi :(x,y) \mapsto \frac{y+\alpha x}{y-\alpha x}<br>$$<br><strong>1.</strong> 如果 $\alpha \in K$，那么 $\psi$ 给出了加法群到乘法群$F_p$的同态。</p><p><strong>2.</strong> 如果 $\alpha \notin K$，那么就有 $E(K) \simeq {u+\alpha v|u,v\in K,u^2-av^2=1 }$ 。同样是加法群到乘法群的同态。后者与$Q[\sqrt2]$很像。</p><h2 id="题目">题目</h2><p>首先题目给出了一种运算，显然和椭圆曲线有关：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python">p = <span class="hljs-number">193387944202565886198256260591909756041</span><br><br>i = <span class="hljs-keyword">lambda</span> x: <span class="hljs-built_in">pow</span>(x, p-<span class="hljs-number">2</span>, p)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">A, B</span>):<br>    (u, v), (w, x) = A, B<br>    <span class="hljs-keyword">assert</span> u != w <span class="hljs-keyword">or</span> v == x<br>    <span class="hljs-keyword">if</span> u == w: <br>        m = (<span class="hljs-number">3</span>*u*w + <span class="hljs-number">4</span>*u + <span class="hljs-number">1</span>) * i(v+x)<br>        <br>    <span class="hljs-keyword">else</span>: <br>        m = (x-v) * i(w-u)<br>    y = m*m - u - w - <span class="hljs-number">2</span><br>    z = m*(u-y) - v<br>    <span class="hljs-keyword">return</span> y % p, z % p<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mul</span>(<span class="hljs-params">t, A, B=<span class="hljs-number">0</span></span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> t: <span class="hljs-keyword">return</span> B<br>    <span class="hljs-keyword">return</span> mul(t//<span class="hljs-number">2</span>, add(A,A), B <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> t&amp;<span class="hljs-number">1</span> <span class="hljs-keyword">else</span> add(B,A) <span class="hljs-keyword">if</span> B <span class="hljs-keyword">else</span> A)<br><br></code></pre></td></tr></table></figure><p>注意到这里计算斜率的方式有一点不一样，在计算 $2P$ 时，一般情况下，由 $y^2=x^3+Ax+B$ 可知：$\frac{dy}{dx}=\frac{3x^2+A}{2y}$ ，而这里却是 $\frac{dy}{dx}=\frac{3x^2+4x+1}{2y}$ 。分离变量积分可得 $y^2=x^3+2x^2+x+C$ 。</p><p>然后题目用了一个随机数$x$，和坐标 $P(4,10)$ ，给出了 $mul(x, P)$ 的结果$Q$，要我们求x。</p><p>这里可以将 $P$ 代入我们得到的方程，可得$C=0$。为了能使方程 $y^2=x^3+2x^2+x$变为 $y^2=x^2(x+a)$ 的形式，就让 $x=x-1$ 。同时P,Q也要做相应变换。</p><p>最后利用上述同态的方法，先求出 $\alpha$ ，然后将 $P,Q$ 分别映射为$u=\frac{y_P+\alpha x_P}{y_P-\alpha x_P}$ 和 $v=\frac{y_Q+\alpha x_Q}{y_Q-\alpha x_Q}$ ,使用离散对数求解即可。</p><p>值得注意的是，离散对数的解不只一个，需要计算 $u$ 的阶随后逐一检验。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">p = <span class="hljs-number">193387944202565886198256260591909756041</span><br>P.&lt;x&gt; = GF(p)[]<br>f = x^<span class="hljs-number">3</span> + <span class="hljs-number">2</span>*x^<span class="hljs-number">2</span> + x<br>P = (<span class="hljs-number">4</span>, <span class="hljs-number">10</span>)<br>Q = (<span class="hljs-number">65639504587209705872811542111125696405</span>, <span class="hljs-number">125330437930804525313353306745824609665</span>)<br><br><span class="hljs-comment"># f_ = f.subs(x=x-1)</span><br><span class="hljs-comment"># print(f_.factor()) # 193387944202565886198256260591909756040</span><br><br>P_ = (P[<span class="hljs-number">0</span>] +<span class="hljs-number">1</span>, P[<span class="hljs-number">1</span>])<br>Q_ = (Q[<span class="hljs-number">0</span>] +<span class="hljs-number">1</span>, Q[<span class="hljs-number">1</span>])<br><br>t = GF(p)(<span class="hljs-number">193387944202565886198256260591909756040</span>).square_root()<br>u = (P_[<span class="hljs-number">1</span>] + t*P_[<span class="hljs-number">0</span>])/(P_[<span class="hljs-number">1</span>] - t*P_[<span class="hljs-number">0</span>]) % p<br>v = (Q_[<span class="hljs-number">1</span>] + t*Q_[<span class="hljs-number">0</span>])/(Q_[<span class="hljs-number">1</span>] - t*Q_[<span class="hljs-number">0</span>]) % p<br><br><span class="hljs-built_in">print</span>(v.log(u))<br>d = multiplicative_order(u)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>knowledge</category>
      
    </categories>
    
    
    <tags>
      
      <tag>elliptic curve</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RSA oracle</title>
    <link href="/2022/12/27/RSA/RSA%20oracle/"/>
    <url>/2022/12/27/RSA/RSA%20oracle/</url>
    
    <content type="html"><![CDATA[<h2 id="Manger’s-attack">Manger’s attack</h2><p>这种oracle会判断接受到的数字 $m$ 是否大于一个给定的数字 $B$ 。如果 $m \le B$ 就返回 $True$ ，否则返回 $False$ , $m \in Integer(n)$ 。</p><p>Manger’s attack就是利用这个oracle恢复出 $m$ ，大致思想就是先一次找到 $f_1,f_2$ ，使得$f_1\cdot m\in [B,2B)$ 及 $f_2 \cdot m \in [n,n+B)$ 。</p><p>这样就给出了 $m$ 的一个初始范围，$m_{min}=\lceil\frac{n}{B}\rceil ,m_{max} = \lfloor \frac{n+B}{f_2} \rfloor$ 。然后再经过一些构造，不断将这个区间二分，从而得到 $m$ 。</p><p>下面给出oracle和attack的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># https://github.com/rkm0959/rkm0959_implements/tree/main/Manger&#x27;s_Attack</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">oracle</span>(<span class="hljs-params">c</span>): <span class="hljs-comment"># Oracle</span><br><span class="hljs-keyword">global</span> cnt<br>cnt += <span class="hljs-number">1</span><br>ptxt = <span class="hljs-built_in">pow</span>(c, d, n)<br><span class="hljs-keyword">if</span> ptxt &lt; B:<br><span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><span class="hljs-keyword">else</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Manger_Attack</span>(<span class="hljs-params">c</span>):<br>f1 = <span class="hljs-number">2</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>val = (<span class="hljs-built_in">pow</span>(f1, e, n) * c) % n<br><span class="hljs-keyword">if</span> oracle(val):<br>f1 = <span class="hljs-number">2</span> * f1<br><span class="hljs-keyword">else</span>:<br><span class="hljs-keyword">break</span><br>f12 = f1 // <span class="hljs-number">2</span><br>f2 = ((n + B) // B) * f12<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>val = (<span class="hljs-built_in">pow</span>(f2, e, n) * c) % n<br><span class="hljs-keyword">if</span> oracle(val):<br><span class="hljs-keyword">break</span><br><span class="hljs-keyword">else</span>:<br>f2 += f12<br>m_min = (n + f2 - <span class="hljs-number">1</span>) // f2<br>m_max = (n + B) // f2<br><span class="hljs-comment"># note the ERRATA from https://github.com/GDSSecurity/mangers-oracle</span><br><span class="hljs-keyword">while</span> m_min &lt; m_max:<br>f_tmp = (<span class="hljs-number">2</span> * B) // (m_max - m_min)<br>I = (f_tmp * m_min) // n <br>f3 = (I * n + m_min - <span class="hljs-number">1</span>) // m_min<br>val = (<span class="hljs-built_in">pow</span>(f3, e, n) * c) % n<br><span class="hljs-keyword">if</span> oracle(val):<br>m_max = (I * n + B) // f3<br><span class="hljs-keyword">else</span>:<br>m_min = (I * n + B + f3 - <span class="hljs-number">1</span>) // f3<br><span class="hljs-keyword">return</span> m_min<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>knowledge</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RSA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>reconstruct modulus by lattice</title>
    <link href="/2022/11/20/Lattice/reconstruct%20modulus%20by%20lattice/"/>
    <url>/2022/11/20/Lattice/reconstruct%20modulus%20by%20lattice/</url>
    
    <content type="html"><![CDATA[<p>题目给出了一组方程，形式为：<br>$$<br>e^{m_i} \equiv c_i(\bmod n)<br>$$<br>然而$m_i$很大，无法通过求$gcd$来获得$n$。<br>由于方程的组数足够多，如果将所有方程联系起来可有效减小指数。</p><p>格子的构造如下：</p><p>$$<br>\left(<br>\begin{matrix}<br>m_1 &amp; 1 &amp; \<br>m_2 &amp; &amp; 1  \<br>\vdots &amp; &amp; &amp; \ddots\<br>m_n &amp; \cdots &amp;\cdots &amp;\cdots  &amp;1<br>\end{matrix}<br>\right)<br>$$</p><p>LLL算法后的得到的格子，以第一行为例，可表示为：<br>$$(k_1<em>m_1+k_2</em>m_2+\cdots + k_n*m_n, k_1 , k_2 , \cdots,k_n)$$</p><p>也即$$e^{\sum_1^nk_i*m_i}\equiv \prod_1^n c_i^{k_i} (mod;n)$$</p><p>如果$\sum_1^nk_i*m_i$为负就让其乘到右边；如果$k_i$为负，就让其乘到左边，最后将得到的数一直求$gcd$即可。</p><p>(测试时gcd求出来的结果需要再次因子分解，存在2、3、5等小因子，本题的数据很特殊，没有恢复出n)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> prod<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">keygen</span>(<span class="hljs-params">pbits,kbits,k</span>):<br>    p = getPrime(pbits)<br>    x = [getPrime(kbits + <span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(k)]<br>    y = prod(x)<br>    <span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>        r = getPrime(pbits - kbits * k)<br>        q = <span class="hljs-number">2</span> * y * r + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> isPrime(q):<br>            <span class="hljs-keyword">return</span> p*q, (p, q, r, x)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">key, message</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">pow</span>(<span class="hljs-number">0x10001</span>, message, key)<br><br>key = keygen(<span class="hljs-number">512</span>, <span class="hljs-number">24</span>, <span class="hljs-number">20</span>)<br>flag = bytes_to_long(flag)<br>messages = [getPrime(flag.bit_length()) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">47</span>)] + [flag]<br>enc = [encrypt(key[<span class="hljs-number">0</span>], message) <span class="hljs-keyword">for</span> message <span class="hljs-keyword">in</span> messages]<br><br><span class="hljs-built_in">print</span>(messages[:-<span class="hljs-number">1</span>])<br><span class="hljs-built_in">print</span>(enc)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">[12663746096003602034805550137868194720916906489657622295298194239094517182776571415625767646380772563193, 14132419026281300247821055412800131398930894216489258113904728404581538907301679419214447815004356250213, 11655428754671560771921463003911904370642761461141746853172776137663446218950185460123311583744244576651, 14437678697063990859655299315506460156072449476596814455497580042773427427201191616010438921219697566207, 15002874749915800226497487675982756978120590555038984559176137265082604998701016560366851521550375289619, 12200429000300054982769822088303708088147776935798495143123101000414999518256814919436691701219929977443, 12022028158932066252554600210953428074479648616693562203622365444081153755664547825203072727322619340391, 15326141484175696149121655412465633104078151316690977231668152920998359592830509503478074055112999574981, 14056771497651385035371546931678946327225541945352605439360765820739927703122904981469057904317776921263, 13627527116278874003582695444496282221231787451158428826309766728816516675463929802270425585235619637873, 9532386535492144267147831028913273489858437724880203373826043347568852523770420241749859385487406483979, 12105119318974808780726286054732236125970820406031457561069902254615102811695780762128818161404504498571, 17375473832716984207301483561766127121416492000960248004847175097439386482194277684885433842142485766979, 16554810021656773269015172383701694656984382699786774223957939352351900556944802452753429128313990996737, 15176915452575891079550629883578986339427556051613114385723386598491455091420380698285277882392147506173, 11806010168620746459109864194771894332952141161819393026586030536903429301218820465075218508304178337693, 10301071899683854933212873261118138833852167112586044571755364655196343466043810121544973678672008613803, 14166775554072964505385268662634177869100699819638306431597407356342551153097479752104518536035399939371, 10149638549982466694759374439977996929610044260455135782295224680189567726832086180314113209468279041757, 11781584892220250690574681563680940126762935519793655192784959502937368059247206358504250608454259891727, 15038928305561471041226064029963106243541545002574865065995806409790534237748546487849249858106550078231, 9580888622178339972260574652417101092469152244093773478970996513098265707736420799213172454323127622633, 16832519731577306391043658360018784702605792203422700389327004686532539689734917760321648488230888187721, 10867599307636425749899548870300113988038540052791923844000360343405148990662095113016671010590469235521, 17467115681041482108467932296242227024623105030257775065640719199713712198126072518920191142637850906683, 9273417146144052655615407700694821772909515142773572691972830367235325718875094311189518007289192669189, 16632824238934881411171218388021828930721084481281881679074243665187528749774173422168476107286651950721, 10581883242475329842566787060887333718055756499659396478793112531016759279124005692583324120011287554937, 17915505401279990026021751220853729828697276123216111805478995734037531915469950842915053859630212282669, 10782951127933994337893639031146049444366465583233074369169440143266558605440864932670063972448118770053, 10176756020954218340342729294765357250100532131670575581012530671423202386081022361061175199978931328671, 13658827352593547554221598195357688731028052333550989106789568768190119263114463407419978955533304562429, 14891712870731238492263819443444939062051933851768953568786715305574300162320426370160524102148144647341, 10385921231223717361217489427301590556224642053715247311910689044243066369482114225234839934781933387317, 17013409655721508165863397312465280020898749311014596585552718375774263478496723317784119730976514130473, 16986882920113484087693092000585103501548559643718025617656633308381676660630862412036186585506899774161, 11453352651216365241578914867406398737971509207465133323955060019598413539108767754962077278598322864301, 16755633786275870614857653299503803951700995626343095443892626619957330702430787078783721161855813805163, 15448657521962024971112157922187306191950692633208198318716657601508105720490330518613598428258399393999, 13445442344820784802664041567908665004819931321301423637095302391845536651285135635627140656111561505441, 9557468167801329362767525412300043569009743279963873824012642650395198714316574006341471079208144585967, 17098254197749431716632768896312100035386578636133269314483367740073947526081776782262947168490582199483, 16835407022333577513897329377457949073175792779993839585759661291470395273625057511614988721879320902427, 16306999806399827080235326712427101893348438406069647763492946439224757958791811990717080643111227201807, 13580334016425716627812690149777819923090303265405445549999854984914558569659989887973025065946663385157, 13110792710299272609698528958861611699151645629852258616789302701448426819110564884922775851490202636881, 14165423701777249263816463401081760426834162610596319073642833757104030978264487767967134870804656476289]</span><br><span class="hljs-string">[57232608914198175109785709371300232177693855726597984936053900368555183181147336312895836187534080073427080654999615527778639368550840082346447311859780241331567239734555580467938250447225626069106101196513103259622377455430858622976701082331136388721125159472447812785142939993215201079156381454179231774978621, 119018622019252168934355440063416070353601068126795157593996773179308331829090813617846715074323709342886276077497762149186679801528162789221386514455479512683730420488200545921618210431980938300089161291644469992260008163539403051482736189309308446661006179700799915857633850683598284957540073230007864001007687, 6122163628062914171517341768803876718204225239795039176674815707292832652022824779820529176787981304153138541719456878186186204622264727458463951667567490266297270999694085051562030232607306260099357571419311953711317201937945632812425299150895404339807975311146159116266980933520593480837401136212447204108049, 28540414123410824174116871648980258694595184814510554181081596920388496284279412323405941240185964737191832645783356008854524037236288389256214745517114972018198837498973693612698538462787963569692770376251970527324079472545283749882989761108810944657299270896094407238648710873736756511689128494479553996569980, 67278930120416218881331446326848251697009804802460482086707926724916142606112769752677376855224039704540779071775615502924601665778596652537347982371095563171698757196325528893745482251006926923517931248138004165768769736874237648555305584043598268309988084995366843540992183241120300859132869831366331600710558, 100441125745454072827180775943684938314832119776801393398707172733554934663150253857204265229489246969289062535749135436558322252067664012937043065312761808726865341867434868750714642040389825289571661397788319344833736025265091503110460610697145217047563412817555970653508368515813966481892006317185835016451596, 15216117530042455399400804489826720273427315418739000010460816009280452996314747501422962977476242525449009860773153042079850388424528150860792687843182357662143003598943761328772890589193531750128029534007416927554961470396996998968754712117453852091512966620492890336420903174876176537738798246079795219745854, 118541309065015685856335846391033886567572688280488418106011358526392112399337378946425518000792132290816624302062971705513928029491812938656625783759873895027943910919262567277145905349608195128462056469713961540517667447151625332802836450303814775982440575824290593573150355925407077920563410787306702533205463, 128389881064636709419836763141515677495188380000146888480597348696945592678282670905925791343389121784046644286523689339199763106802825872989267651350937875209973619149021581029505933792860832895657339679214599201637317323656626462814144544301491824556559035411714532843566344523217819358896371943350639942459949, 34093856775781856551191147692508868666336509269856011110737357636215480841525445733330940087981829545127700802659540443440189524089943638275810382531930541835422545115011751274985231327701498777770819771076207589931619915169066258894847224146756480054695482898013102816123551733159333649898586559428557971850701, 81300851339401181812622971818456807765918449363627764350395250541212488081576716833807248879650649362171107666776341430534661723935291947760015791546044469452363961895420142561758463985262985214902182739623920284210707167192767526178841138011634179210631980347705048905526562571093675029106563005606342950051013, 81184744346790924098390626343061862533926196813436264423392782313183788824888005366960636464932666991679250036623225102844077245305279615789985297028151686367395487188181416047313913708495129221758772076767595640173439548175714389499004700598291317543926421962858976817846596643104360539905688568401039734718483, 26434131154005660208202418251350553299645786233494766029878297162082886997824532111995385786035751557354362898428335530451272701789617149071688592843246870280783453272275136306294400300985731992703683476375688305074195262278872080404088938102904111143101067942664642550110639626664123760598968951181617689902541, 20583461169361164936012239952506086042941935876382559469522600586017850800344765779998955301922686194592613728117977392668857817500652927316170071259763189098650100319355732975236340932783385931830714959967369110831948835561327035695862957210809046317597465402541788054523440985447601668375174517972307420752222, 99534127272271736561819944763606095922497555550678291381059549633615143166598789208945263137876687923783077645427746546609553288013773320686523582406074630183160062915395771686193917033832627369751874816677354435908597099043633357467600006811423136496389263128632570405208493745830930161893550082268510553243436, 118512116206510628620173620535467344051381976286214661348788449888449951031872461765117206926632677694087945546315408145619615151832782942014233116281935093137585570386446879683134361566600024471557481076162998555307020705103001626351022137545564104344410566269738892608918426693130348185415804993793721209609921, 39696874135154683267112097021680040753243138159093000082671302585498437603319904894403312138376713524983452218540365741436497014252623022059517764732201708697832675412789710043016297658647765241931376357562085304351217443979514385699767267553378445677211510486519988739144271419362000197607483106320082211157894, 25615713579794183863442485192387430658723428296464586587898591117935830443598276803565696400498331135396182162761634590925312795732761646132215168836455602406883764926399157309533193399134550418083687077959980816090474500772169035534758695041065067455682003512957204985608587710672977761801979298600719822016047, 23793209649566114665504267496369174053459786578228840738712746160813356913085291840670926485938467021921249748937163453045493268190727694834746331675450612307162991196358494672951680343821853030212625697896822806418811182729559057694617576595345840050914186351202035936407830993232414495830287089643357113630503, 84900868031750701719170495739268701340448411132522906627713496129145064055990332922002486194735907569742410314242506161002441004555229668928980128799296166340146123428623689620142768423244946548591211248837198305592226407665478362906541272913507633212921149441249303673799120352922183629944134036918567534983647, 64854743778344461573875505197765202610602120089852481429093133918839065327096609472074901493597943717665732351345476707313576146260579823636441977310462506242356225915419035285099759708938797787590056266006186272630085683224747473152107252181715962546230577202193544842264175396407294764016400072051626879823666, 43786460809814877850055135457752884384516501548292829314979687937607951889102449353983106504856286698338120117264846883578454109760559338097644845777254246143813247771973297517920813642987087609503855062297041188130113307877018724419913492364040334823999299826485220355118533227105208525871102164850743592197880, 18410848816279000082865665087967308434683881846057587302207644885782121929540614117218622845465184222863920784374706231486900135399669880462420214078693028046048021435260904923927365018413834214333078986702654848677487103752777924965608975606985449643730404332158705821979821026927627232457593514769409557857794, 37528795642427381026743303290555251064602380591515328584173853460474597557188114837322912676348557014234144738972886931444325218088188023630647534035725264163124845482521689580289083806870704489342225504049591490404844227836527733261384542641712205218746355586140270679557466938414940696629906671790333847339100, 120184174837129922978041761049752494349805405363915733328766090037154677842877770589616516870003359227784292556831725911705007653205940334469000068369577478846709121385821095258347556939153698007282502763909940256677799743506174272974157274102970394457871359832172736455842603413137518696350897940124898715264328, 85114042547376870094991062686681561109370712951526036710890642223255504371925133357863720777505794177722019923294054968209724320983289575941774562335331869126256931667309246608290713579479837728662330515334593645923196813941733211556279847804080648269475904763815679632829504041349748084243435407170116086099571, 85664036841997000249918266611625095874187200068219663599240259437252325179648759068399867768105884800411762830251668911635511387529518068874630535460984056737847815294298413093595113435496939074803361947656093885514112089591812880957906107416384430811199239381641849560512236254320481734660943314397466382518670, 19868151443713684033326315419488805314642951421071058037081518185917142386124119384204580739191353408815653188976676798334838959292276152979270636624021744528913109029922119160800340250667168104047373320086805282333539262671835560171422052545510197952709359772287020357635465074316209873689272267323257955153323, 51029267901687836725907965568430647221250571180244643611425953900542586039831128405596005089082767047574164924899010105416329727934881100139413736187064637473224707121868210639131044204973756282046850557215004436827715093816988545799405346151923231447395532258095016482637754870243670358652069698049268883589124, 88034211107477606037608516993038006849109216205386189419249337698181850592850024345069840216575652166713813867810010665618768531718281563277119288198903566342692567184172362056718934854721638856943432002177665039289279569277329521972446746782839371702287518786028884532536089431813622499739059673650919651503327, 34290724215292206898895850910853573969604203610446796482457188079779084234166755672139575160998526644200788650835348904310076192206731369137747137479474593487141698098918402805229456473832106349331555085747621113162720499571078980178142378770306917802125052880993548469701984751330079122660792309621426541588076, 90927188279218437043454554956642015346713372562371359261616779706538939681408456355974513604735454447880695728673117860551338566945192506092751947158505621256166944871575026077958544804376039892815849827345907923264667687859857788352006910436664478067757651891635634923727530789609690792776873591562573033390634, 53732343203006760442398433872134781295830656980276609591138146207626163562517843649120913243776843334107106691749493938619111007479062412456809500791493383632196471953312152159801577623906430605844235078132185853920208052494745920119335711435221738446984963476234515199656235009292715443135922168345909287531773, 49031927534145883184926164295828977811711469424781078012610739070444671584077746477613031478660697183975633421868019649807499312667206591889141783516733744766298933391910692474266962004086039942805103040216748384407579306341588913664371259037264104088526364892368819697446167356277559716864693012958967681100260, 30963093465814372302516642776466055177417508152527408097213764844911320991146439597064292750638894222728431395063768524250417428928630674742251008274743494898189847494654965058948152674638339661926080272873883532044920176841760857878305035802233007949695617087173051988751329551256926898662442540254844991028514, 38910112932907768300302033715233195117875021511365865825041254667079681402773472898691511153844674335901286966993706447991762641623427579348204449246293604501210799161052618900641298875451688446687090763591699182741091728011538059864656433159402170621985800117954635372431554313743158156450491482836596392698540, 38443585562211316355274911393358256761473644112925764889560030180611756915515144544478860742103854890487528907562890898220560352513541741776265949250582845223992532020273016857208957223972389401808992966177007678770950599391794859006751879990019132124290539952279226068978275232584696063868776228658398019508687, 68550545600754879458876198377420845829320975904563551687242682944061564106671329644108261571744526116101799247679080797784186089149212343674697695440503566377158992929812917026042984952900100484829086299001655020193931835567043420882168129444729139288226492289343177679790267321958684637995637195757642488407276, 14035877123755570541439737876187097058990065301274722507585166336666626066786310262014548146436251719506889507596006387639929786023894491544460425397241776709067116382427351107782288254085502357976399257409284873091313992760783124271797334837519629008018411961593376262210281164953819570277107742944093278192891, 84973935660270819758814233083142240710785309884502607538970282884173754299778363893310221726403783947387743415857505995412132704938765096035328014089802283590788326117498458965239857137170690424984064818395940808347999385981549657227261498421032954560304304123396784276562818279812166711176719165057986653655269, 127652767021260495264466818414737386226807627335092643140999814315165072776677100093295944121947491864703175075802550400479697578962892452948470076586765670039963843210663006398013035858021917292520141025024089841431675871893235220229330118710120234682740731230605781585933497507868222142730438320650171223860410, 10820660907713821060756049660148560389325280624093461093810612541407581846537858936018021071684134263919140572079037344255372562710590250975822332043248751602294057721687638216684660439386848864418110118512208174355768432871226086246312894904364514743506427898091247247420131030953043354451982106624371303476576, 22509117536200148044923857446175408893075911404191032333097026503103010276105955757884180889706600230561199133331513880035633926105853975206764813984995520499767942092693844323122983122419315389669151529120786805203317761028263320034762418835415040762546573582987418970210522622738218431543314964785802667587831, 17110527541362531877473330877601602495160188646106725957393956572731745660242627602027036247078158084197564066866793058830963123952529593790431750896935886096261794752083336388036458068396262377010283577634659205378999555399253008352426584270580993143755095742288863170042056511437561276980640231653447089696471, 61348969566002296992170896072625129282323865986171588065667375012252011568769255349045185267959292869829157950934447113661709763529293480980845035985257633760151897807384916925942496992692306256026272824777993338140456567783548738678972934778493803536774329693410845609652017903413643751788619405927638767324811, 22510200266842330474614868643482821984644884364293177816481436665684674092037143647321900145327127043489514908412852947132346581389833878070779594530084319995806315545603004624097888294152486960640012202384261073555560735843725251439470919050946837207965392746584707716070872006144735413123120629275998839207636, 50720056568644721066647792700132746371519628076501379437908002312608804539261649596142852235153482308383208999791237037363767518135800305446886547979409480500284980037243584682485311702605225147297356529617446995741990013066746514569978566927909505486404585512297997162119969692237951781374377056093090642010097, 91561944814950778736488535643520052714900101756544637483800925876319855838327993556442983654484996766433049736153189800056457912285338408230393372558184963346036063617106521919740962726456954911219888157214487326900658606650604294547947205051640436119495039170478782141363198165616660075024383933961325219072058]</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br></code></pre></td></tr></table></figure><p>exp为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">compute_n</span>(<span class="hljs-params">row</span>):<br>    <span class="hljs-keyword">if</span> row[<span class="hljs-number">0</span>] &gt; <span class="hljs-number">0</span>:<br>        right = <span class="hljs-number">1</span><br>        left = <span class="hljs-built_in">pow</span>(e, row[<span class="hljs-number">0</span>])<br>    <span class="hljs-keyword">else</span>:<br>        right = <span class="hljs-built_in">pow</span>(e, -row[<span class="hljs-number">0</span>])<br>        left = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i, coff <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(row[<span class="hljs-number">1</span>:]):<br>        <span class="hljs-keyword">if</span> coff &gt; <span class="hljs-number">0</span>:<br>            right *= enc[i]^coff<br>        <span class="hljs-keyword">else</span>:<br>            left *= enc[i]^(-coff)<br>    <span class="hljs-keyword">return</span> left - right<br>        <br>e = <span class="hljs-number">0x10001</span><br>p = getPrime(<span class="hljs-number">512</span>)<br>q = getPrime(<span class="hljs-number">512</span>)<br>n = p * q<br>msg = [getPrime(<span class="hljs-number">400</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">47</span>)]<br>enc = [ZZ(<span class="hljs-built_in">pow</span>(e, message, n)) <span class="hljs-keyword">for</span> message <span class="hljs-keyword">in</span> msg]<br><br><span class="hljs-comment"># msg = [12663746096003602034805550137868194720916906489657622295298194239094517182776571415625767646380772563193, 14132419026281300247821055412800131398930894216489258113904728404581538907301679419214447815004356250213, 11655428754671560771921463003911904370642761461141746853172776137663446218950185460123311583744244576651, 14437678697063990859655299315506460156072449476596814455497580042773427427201191616010438921219697566207, 15002874749915800226497487675982756978120590555038984559176137265082604998701016560366851521550375289619, 12200429000300054982769822088303708088147776935798495143123101000414999518256814919436691701219929977443, 12022028158932066252554600210953428074479648616693562203622365444081153755664547825203072727322619340391, 15326141484175696149121655412465633104078151316690977231668152920998359592830509503478074055112999574981, 14056771497651385035371546931678946327225541945352605439360765820739927703122904981469057904317776921263, 13627527116278874003582695444496282221231787451158428826309766728816516675463929802270425585235619637873, 9532386535492144267147831028913273489858437724880203373826043347568852523770420241749859385487406483979, 12105119318974808780726286054732236125970820406031457561069902254615102811695780762128818161404504498571, 17375473832716984207301483561766127121416492000960248004847175097439386482194277684885433842142485766979, 16554810021656773269015172383701694656984382699786774223957939352351900556944802452753429128313990996737, 15176915452575891079550629883578986339427556051613114385723386598491455091420380698285277882392147506173, 11806010168620746459109864194771894332952141161819393026586030536903429301218820465075218508304178337693, 10301071899683854933212873261118138833852167112586044571755364655196343466043810121544973678672008613803, 14166775554072964505385268662634177869100699819638306431597407356342551153097479752104518536035399939371, 10149638549982466694759374439977996929610044260455135782295224680189567726832086180314113209468279041757, 11781584892220250690574681563680940126762935519793655192784959502937368059247206358504250608454259891727, 15038928305561471041226064029963106243541545002574865065995806409790534237748546487849249858106550078231, 9580888622178339972260574652417101092469152244093773478970996513098265707736420799213172454323127622633, 16832519731577306391043658360018784702605792203422700389327004686532539689734917760321648488230888187721, 10867599307636425749899548870300113988038540052791923844000360343405148990662095113016671010590469235521, 17467115681041482108467932296242227024623105030257775065640719199713712198126072518920191142637850906683, 9273417146144052655615407700694821772909515142773572691972830367235325718875094311189518007289192669189, 16632824238934881411171218388021828930721084481281881679074243665187528749774173422168476107286651950721, 10581883242475329842566787060887333718055756499659396478793112531016759279124005692583324120011287554937, 17915505401279990026021751220853729828697276123216111805478995734037531915469950842915053859630212282669, 10782951127933994337893639031146049444366465583233074369169440143266558605440864932670063972448118770053, 10176756020954218340342729294765357250100532131670575581012530671423202386081022361061175199978931328671, 13658827352593547554221598195357688731028052333550989106789568768190119263114463407419978955533304562429, 14891712870731238492263819443444939062051933851768953568786715305574300162320426370160524102148144647341, 10385921231223717361217489427301590556224642053715247311910689044243066369482114225234839934781933387317, 17013409655721508165863397312465280020898749311014596585552718375774263478496723317784119730976514130473, 16986882920113484087693092000585103501548559643718025617656633308381676660630862412036186585506899774161, 11453352651216365241578914867406398737971509207465133323955060019598413539108767754962077278598322864301, 16755633786275870614857653299503803951700995626343095443892626619957330702430787078783721161855813805163, 15448657521962024971112157922187306191950692633208198318716657601508105720490330518613598428258399393999, 13445442344820784802664041567908665004819931321301423637095302391845536651285135635627140656111561505441, 9557468167801329362767525412300043569009743279963873824012642650395198714316574006341471079208144585967, 17098254197749431716632768896312100035386578636133269314483367740073947526081776782262947168490582199483, 16835407022333577513897329377457949073175792779993839585759661291470395273625057511614988721879320902427, 16306999806399827080235326712427101893348438406069647763492946439224757958791811990717080643111227201807, 13580334016425716627812690149777819923090303265405445549999854984914558569659989887973025065946663385157, 13110792710299272609698528958861611699151645629852258616789302701448426819110564884922775851490202636881, 14165423701777249263816463401081760426834162610596319073642833757104030978264487767967134870804656476289]</span><br><span class="hljs-comment"># enc = [57232608914198175109785709371300232177693855726597984936053900368555183181147336312895836187534080073427080654999615527778639368550840082346447311859780241331567239734555580467938250447225626069106101196513103259622377455430858622976701082331136388721125159472447812785142939993215201079156381454179231774978621, 119018622019252168934355440063416070353601068126795157593996773179308331829090813617846715074323709342886276077497762149186679801528162789221386514455479512683730420488200545921618210431980938300089161291644469992260008163539403051482736189309308446661006179700799915857633850683598284957540073230007864001007687, 6122163628062914171517341768803876718204225239795039176674815707292832652022824779820529176787981304153138541719456878186186204622264727458463951667567490266297270999694085051562030232607306260099357571419311953711317201937945632812425299150895404339807975311146159116266980933520593480837401136212447204108049, 28540414123410824174116871648980258694595184814510554181081596920388496284279412323405941240185964737191832645783356008854524037236288389256214745517114972018198837498973693612698538462787963569692770376251970527324079472545283749882989761108810944657299270896094407238648710873736756511689128494479553996569980, 67278930120416218881331446326848251697009804802460482086707926724916142606112769752677376855224039704540779071775615502924601665778596652537347982371095563171698757196325528893745482251006926923517931248138004165768769736874237648555305584043598268309988084995366843540992183241120300859132869831366331600710558, 100441125745454072827180775943684938314832119776801393398707172733554934663150253857204265229489246969289062535749135436558322252067664012937043065312761808726865341867434868750714642040389825289571661397788319344833736025265091503110460610697145217047563412817555970653508368515813966481892006317185835016451596, 15216117530042455399400804489826720273427315418739000010460816009280452996314747501422962977476242525449009860773153042079850388424528150860792687843182357662143003598943761328772890589193531750128029534007416927554961470396996998968754712117453852091512966620492890336420903174876176537738798246079795219745854, 118541309065015685856335846391033886567572688280488418106011358526392112399337378946425518000792132290816624302062971705513928029491812938656625783759873895027943910919262567277145905349608195128462056469713961540517667447151625332802836450303814775982440575824290593573150355925407077920563410787306702533205463, 128389881064636709419836763141515677495188380000146888480597348696945592678282670905925791343389121784046644286523689339199763106802825872989267651350937875209973619149021581029505933792860832895657339679214599201637317323656626462814144544301491824556559035411714532843566344523217819358896371943350639942459949, 34093856775781856551191147692508868666336509269856011110737357636215480841525445733330940087981829545127700802659540443440189524089943638275810382531930541835422545115011751274985231327701498777770819771076207589931619915169066258894847224146756480054695482898013102816123551733159333649898586559428557971850701, 81300851339401181812622971818456807765918449363627764350395250541212488081576716833807248879650649362171107666776341430534661723935291947760015791546044469452363961895420142561758463985262985214902182739623920284210707167192767526178841138011634179210631980347705048905526562571093675029106563005606342950051013, 81184744346790924098390626343061862533926196813436264423392782313183788824888005366960636464932666991679250036623225102844077245305279615789985297028151686367395487188181416047313913708495129221758772076767595640173439548175714389499004700598291317543926421962858976817846596643104360539905688568401039734718483, 26434131154005660208202418251350553299645786233494766029878297162082886997824532111995385786035751557354362898428335530451272701789617149071688592843246870280783453272275136306294400300985731992703683476375688305074195262278872080404088938102904111143101067942664642550110639626664123760598968951181617689902541, 20583461169361164936012239952506086042941935876382559469522600586017850800344765779998955301922686194592613728117977392668857817500652927316170071259763189098650100319355732975236340932783385931830714959967369110831948835561327035695862957210809046317597465402541788054523440985447601668375174517972307420752222, 99534127272271736561819944763606095922497555550678291381059549633615143166598789208945263137876687923783077645427746546609553288013773320686523582406074630183160062915395771686193917033832627369751874816677354435908597099043633357467600006811423136496389263128632570405208493745830930161893550082268510553243436, 118512116206510628620173620535467344051381976286214661348788449888449951031872461765117206926632677694087945546315408145619615151832782942014233116281935093137585570386446879683134361566600024471557481076162998555307020705103001626351022137545564104344410566269738892608918426693130348185415804993793721209609921, 39696874135154683267112097021680040753243138159093000082671302585498437603319904894403312138376713524983452218540365741436497014252623022059517764732201708697832675412789710043016297658647765241931376357562085304351217443979514385699767267553378445677211510486519988739144271419362000197607483106320082211157894, 25615713579794183863442485192387430658723428296464586587898591117935830443598276803565696400498331135396182162761634590925312795732761646132215168836455602406883764926399157309533193399134550418083687077959980816090474500772169035534758695041065067455682003512957204985608587710672977761801979298600719822016047, 23793209649566114665504267496369174053459786578228840738712746160813356913085291840670926485938467021921249748937163453045493268190727694834746331675450612307162991196358494672951680343821853030212625697896822806418811182729559057694617576595345840050914186351202035936407830993232414495830287089643357113630503, 84900868031750701719170495739268701340448411132522906627713496129145064055990332922002486194735907569742410314242506161002441004555229668928980128799296166340146123428623689620142768423244946548591211248837198305592226407665478362906541272913507633212921149441249303673799120352922183629944134036918567534983647, 64854743778344461573875505197765202610602120089852481429093133918839065327096609472074901493597943717665732351345476707313576146260579823636441977310462506242356225915419035285099759708938797787590056266006186272630085683224747473152107252181715962546230577202193544842264175396407294764016400072051626879823666, 43786460809814877850055135457752884384516501548292829314979687937607951889102449353983106504856286698338120117264846883578454109760559338097644845777254246143813247771973297517920813642987087609503855062297041188130113307877018724419913492364040334823999299826485220355118533227105208525871102164850743592197880, 18410848816279000082865665087967308434683881846057587302207644885782121929540614117218622845465184222863920784374706231486900135399669880462420214078693028046048021435260904923927365018413834214333078986702654848677487103752777924965608975606985449643730404332158705821979821026927627232457593514769409557857794, 37528795642427381026743303290555251064602380591515328584173853460474597557188114837322912676348557014234144738972886931444325218088188023630647534035725264163124845482521689580289083806870704489342225504049591490404844227836527733261384542641712205218746355586140270679557466938414940696629906671790333847339100, 120184174837129922978041761049752494349805405363915733328766090037154677842877770589616516870003359227784292556831725911705007653205940334469000068369577478846709121385821095258347556939153698007282502763909940256677799743506174272974157274102970394457871359832172736455842603413137518696350897940124898715264328, 85114042547376870094991062686681561109370712951526036710890642223255504371925133357863720777505794177722019923294054968209724320983289575941774562335331869126256931667309246608290713579479837728662330515334593645923196813941733211556279847804080648269475904763815679632829504041349748084243435407170116086099571, 85664036841997000249918266611625095874187200068219663599240259437252325179648759068399867768105884800411762830251668911635511387529518068874630535460984056737847815294298413093595113435496939074803361947656093885514112089591812880957906107416384430811199239381641849560512236254320481734660943314397466382518670, 19868151443713684033326315419488805314642951421071058037081518185917142386124119384204580739191353408815653188976676798334838959292276152979270636624021744528913109029922119160800340250667168104047373320086805282333539262671835560171422052545510197952709359772287020357635465074316209873689272267323257955153323, 51029267901687836725907965568430647221250571180244643611425953900542586039831128405596005089082767047574164924899010105416329727934881100139413736187064637473224707121868210639131044204973756282046850557215004436827715093816988545799405346151923231447395532258095016482637754870243670358652069698049268883589124, 88034211107477606037608516993038006849109216205386189419249337698181850592850024345069840216575652166713813867810010665618768531718281563277119288198903566342692567184172362056718934854721638856943432002177665039289279569277329521972446746782839371702287518786028884532536089431813622499739059673650919651503327, 34290724215292206898895850910853573969604203610446796482457188079779084234166755672139575160998526644200788650835348904310076192206731369137747137479474593487141698098918402805229456473832106349331555085747621113162720499571078980178142378770306917802125052880993548469701984751330079122660792309621426541588076, 90927188279218437043454554956642015346713372562371359261616779706538939681408456355974513604735454447880695728673117860551338566945192506092751947158505621256166944871575026077958544804376039892815849827345907923264667687859857788352006910436664478067757651891635634923727530789609690792776873591562573033390634, 53732343203006760442398433872134781295830656980276609591138146207626163562517843649120913243776843334107106691749493938619111007479062412456809500791493383632196471953312152159801577623906430605844235078132185853920208052494745920119335711435221738446984963476234515199656235009292715443135922168345909287531773, 49031927534145883184926164295828977811711469424781078012610739070444671584077746477613031478660697183975633421868019649807499312667206591889141783516733744766298933391910692474266962004086039942805103040216748384407579306341588913664371259037264104088526364892368819697446167356277559716864693012958967681100260, 30963093465814372302516642776466055177417508152527408097213764844911320991146439597064292750638894222728431395063768524250417428928630674742251008274743494898189847494654965058948152674638339661926080272873883532044920176841760857878305035802233007949695617087173051988751329551256926898662442540254844991028514, 38910112932907768300302033715233195117875021511365865825041254667079681402773472898691511153844674335901286966993706447991762641623427579348204449246293604501210799161052618900641298875451688446687090763591699182741091728011538059864656433159402170621985800117954635372431554313743158156450491482836596392698540, 38443585562211316355274911393358256761473644112925764889560030180611756915515144544478860742103854890487528907562890898220560352513541741776265949250582845223992532020273016857208957223972389401808992966177007678770950599391794859006751879990019132124290539952279226068978275232584696063868776228658398019508687, 68550545600754879458876198377420845829320975904563551687242682944061564106671329644108261571744526116101799247679080797784186089149212343674697695440503566377158992929812917026042984952900100484829086299001655020193931835567043420882168129444729139288226492289343177679790267321958684637995637195757642488407276, 14035877123755570541439737876187097058990065301274722507585166336666626066786310262014548146436251719506889507596006387639929786023894491544460425397241776709067116382427351107782288254085502357976399257409284873091313992760783124271797334837519629008018411961593376262210281164953819570277107742944093278192891, 84973935660270819758814233083142240710785309884502607538970282884173754299778363893310221726403783947387743415857505995412132704938765096035328014089802283590788326117498458965239857137170690424984064818395940808347999385981549657227261498421032954560304304123396784276562818279812166711176719165057986653655269, 127652767021260495264466818414737386226807627335092643140999814315165072776677100093295944121947491864703175075802550400479697578962892452948470076586765670039963843210663006398013035858021917292520141025024089841431675871893235220229330118710120234682740731230605781585933497507868222142730438320650171223860410, 10820660907713821060756049660148560389325280624093461093810612541407581846537858936018021071684134263919140572079037344255372562710590250975822332043248751602294057721687638216684660439386848864418110118512208174355768432871226086246312894904364514743506427898091247247420131030953043354451982106624371303476576, 22509117536200148044923857446175408893075911404191032333097026503103010276105955757884180889706600230561199133331513880035633926105853975206764813984995520499767942092693844323122983122419315389669151529120786805203317761028263320034762418835415040762546573582987418970210522622738218431543314964785802667587831, 17110527541362531877473330877601602495160188646106725957393956572731745660242627602027036247078158084197564066866793058830963123952529593790431750896935886096261794752083336388036458068396262377010283577634659205378999555399253008352426584270580993143755095742288863170042056511437561276980640231653447089696471, 61348969566002296992170896072625129282323865986171588065667375012252011568769255349045185267959292869829157950934447113661709763529293480980845035985257633760151897807384916925942496992692306256026272824777993338140456567783548738678972934778493803536774329693410845609652017903413643751788619405927638767324811, 22510200266842330474614868643482821984644884364293177816481436665684674092037143647321900145327127043489514908412852947132346581389833878070779594530084319995806315545603004624097888294152486960640012202384261073555560735843725251439470919050946837207965392746584707716070872006144735413123120629275998839207636, 50720056568644721066647792700132746371519628076501379437908002312608804539261649596142852235153482308383208999791237037363767518135800305446886547979409480500284980037243584682485311702605225147297356529617446995741990013066746514569978566927909505486404585512297997162119969692237951781374377056093090642010097, 91561944814950778736488535643520052714900101756544637483800925876319855838327993556442983654484996766433049736153189800056457912285338408230393372558184963346036063617106521919740962726456954911219888157214487326900658606650604294547947205051640436119495039170478782141363198165616660075024383933961325219072058]</span><br><br>M = matrix(ZZ, <span class="hljs-built_in">len</span>(msg), <span class="hljs-built_in">len</span>(msg)+<span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(msg)):<br>    M[i, <span class="hljs-number">0</span>] = msg[i]<br>    M[i, i+<span class="hljs-number">1</span>] = <span class="hljs-number">1</span><br>    <br>C = M.LLL()<br><br>n0 = ZZ(compute_n(C[<span class="hljs-number">0</span>]))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">47</span>):<br>    n1 = compute_n(C[i])<br>    n0 = ZZ(gcd(n0, n1))<br>    <span class="hljs-keyword">if</span> n0.nbits() &lt;= <span class="hljs-number">1024</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n:&quot;</span>, n0)<br>        <span class="hljs-keyword">break</span><br>factor(n0,limit= <span class="hljs-number">2</span>^<span class="hljs-number">20</span>)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>compet</category>
      
    </categories>
    
    
    <tags>
      
      <tag>lattice</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>create lattice for PRNG</title>
    <link href="/2022/11/20/Lattice/create%20lattice%20for%20PRNG/"/>
    <url>/2022/11/20/Lattice/create%20lattice%20for%20PRNG/</url>
    
    <content type="html"><![CDATA[<p>CSAW中的crypto一道题</p><p>给出$a_0,a_1, b_0, b_1, n_1, n_2$,以及递推序列</p><p>$<br>\begin{align}<br>&amp;x_n \equiv a_0x_{n-1}+a_1x_{n-2} (\bmod n_1)\<br>&amp;y_n \equiv b_0y_{n-1}+b_1y_{n-2} (\bmod n_2)\<br>&amp;z_n \equiv x_n-y_n (\bmod n_1)<br>\end{align}<br>$<br>PRNG泄露了五次，每次泄露$x$的低307位，$z$的高307位。</p><p>思路是先造格子将x恢复，由于第三个式子的k很小(0或1)，从而根据z的高位可求出y的高位，然后用相同的方法恢复y。</p><p>记h为x的高位，l为x的低位，则$x=G*h+l$。<br>由于泄露了五次，于是可以将前两次x的高位视为未知数，得到三个方程。其形式为：$\begin{align}<br>A_i(Gh_0+l_0)+B_i(Gh_1+l_1) \equiv Gh_i+l_i (\bmod n_1)<br>\end{align}$<br>可化为：<br>$<br>\begin{align}<br>&amp;A_ih_0+B_ih_1+C_i \equiv h_i (\bmod n_1)\<br>&amp;C_i \equiv G^{-1}(A_il_0+B_il_1-l_i)(\bmod n_1)<br>\end{align}<br>$</p><p>从而考虑这样造格子：<br>$$(k_1,k_2,k_3,h_0,h_1,1)\cdot<br>\left(<br>\begin{matrix}<br>n_1 &amp;  &amp; &amp; &amp; &amp; \<br>&amp; n_1 &amp; &amp; &amp; &amp; \<br>&amp;  &amp; n_1 &amp; &amp; &amp;\<br>A_0&amp; A_1&amp;A_2 &amp;1 &amp;      \<br>B_0&amp; B_1 &amp; B_2&amp; &amp;1 &amp;      \<br>C_0 &amp;C_1 &amp;C_2 &amp; &amp; &amp;2^{205}<br>\end{matrix}<br>\right) \<br>;<br>\<br>\qquad \qquad \qquad =(h_2,h_3,h_4,h_0,h_1,2^{205})<br>$$</p><p>这样可恢复所有的x。<br>随后方法就类似了，考虑y的高位造类似的格子即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">import</span> random<br><br>module_bit = <span class="hljs-number">512</span><br>beta = <span class="hljs-number">0.6</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">PRNG</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-literal">None</span>:<br>        self.n1 = getPrime(module_bit)<br>        self.n2 = getPrime(module_bit)<br><br>        self.A_l = [random.randrange(<span class="hljs-number">1</span>,self.n1) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>)]<br>        self.B_l = [random.randrange(<span class="hljs-number">1</span>,self.n2) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>)]<br><br>        self.x_state = [random.randrange(<span class="hljs-number">1</span>,self.n2) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>)]<br>        self.y_state = [random.randrange(<span class="hljs-number">1</span>,self.n2) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>)]<br><br>        self.z_state = [(self.x_state[i] - self.y_state[i]) % self.n1 <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>)]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">clock</span>(<span class="hljs-params">self</span>):<br>        x_next = (self.A_l[<span class="hljs-number">0</span>] * self.x_state[-<span class="hljs-number">1</span>] + self.A_l[<span class="hljs-number">1</span>] * self.x_state[-<span class="hljs-number">2</span>]) % self.n1<br>        self.x_state.append(x_next)<br><br>        y_next = (self.B_l[<span class="hljs-number">0</span>] * self.y_state[-<span class="hljs-number">1</span>] + self.B_l[<span class="hljs-number">1</span>] * self.y_state[-<span class="hljs-number">2</span>]) % self.n2<br>        self.y_state.append(y_next)<br><br>        z_next = (x_next-y_next) % self.n1<br>        self.z_state.append(z_next)<br><br>        <span class="hljs-keyword">return</span> x_next,y_next,z_next<br><br>prng = PRNG()<br>A_l,B_l,n1,n2 = prng.A_l,prng.B_l,prng.n1,prng.n2<br>ret_xs = []<br>ret_ys = []<br>ret_zs = []<br><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>    ret_x,ret_y,ret_z = prng.clock()<br>    ret_xs.append(ret_x &amp; (<span class="hljs-number">2</span> ** <span class="hljs-built_in">int</span>(module_bit * beta) - <span class="hljs-number">1</span>))<br>    ret_zs.append(ret_z &gt;&gt; <span class="hljs-built_in">int</span>(module_bit * (<span class="hljs-number">1</span>-beta)) &lt;&lt; <span class="hljs-built_in">int</span>(module_bit * (<span class="hljs-number">1</span>-beta)))<br><br>m = bytes_to_long(flag)<br>a = prng.clock()[<span class="hljs-number">1</span>]<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a0,a1 = &quot;</span> , A_l)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;b0,b1 = &quot;</span> , B_l)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n1 = &quot;</span> , n1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n2 = &quot;</span> , n2)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;xs = &quot;</span> , ret_xs)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;zs = &quot;</span> , ret_zs)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;encflag = &quot;</span> , long_to_bytes(a ^ m))<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">a0,a1 =  [9919754465736816172569173052425931289517829891854342593290927744542118133847348662406222547572947297178727236300405992491684375909305177189047780739423811, 2558159371069956421749072997341298610563190398496109008773995596731281585562821740934514052081914548707643961639133075782257512937408016925625816701379184]</span><br><span class="hljs-string">b0,b1 =  [2605193676009044327751542404995552395651364785430784591434496675113980641629822868464738894812540539614357309531957125239722030117295601326651054134997855, 3197045230062951998763856325415663842943082118997359612045648551897230423045976716318651375603679498159844171771317291574116847000481449039959441081514627]</span><br><span class="hljs-string">n1 =  11681289596798868397030596649789726767285990000843272211957420810019522067387532211264897471096909399295930769738569665286430964000906934541163352714344519</span><br><span class="hljs-string">n2 =  10557965421921341302784057525127038885537939006621468287750526343357317493360177624286054901157989185048184920439519551848192429179141349006037985539214071</span><br><span class="hljs-string">xs =  [258466590698311071331247037930868824798600351331801120333006455557946900924072178631112955877, 9821442718613283840479818314015332171481079398147839951441986495105073061641539763228587316, 44840961768274714901326962447354283020302651991130253647924461474246517162698016799008370900, 4181026132314144744475531197443398345060712084263169112302700944672100108051705214872237804, 165146543464042899162832236414189105534540273973129205248892886798269176015886688299461120067]</span><br><span class="hljs-string">zs =  [11425495409956732054927782736077190158254288269207497569801502736793464884202670506015379318738941018498330797528225268357863433326525610294847934650384384, 6493331726937754866196531134748756985061780536063848814074103775547995272554729994318400024248625477632819500830464284078877134996898279637865644465061888, 993089766452002806192286220960438231942075399393023941745370499613681022868865277955412695258671518735133398965459541404411563617841529593232577007714304, 9947918164778455706315062500056819613968192691484842758450452417155875586535345223342626196771965216296162822961357707526761812463743778564968870859243520, 6798568953150532649740005658966557905457680624368167498216858785007123058363282156005182480229608829437870473084370507240870801760529936705635869020651520]      </span><br><span class="hljs-string">encflag =  b&#x27;\x84\x0bk\xfbmp\x1aV\x95q\r\x9bZ/s\xe5\xb4\xa5Y~y\xac\xaa\xd1\xff\xf1\xf1\xee#\xbd\x07:n\x9c\xd6\xcdV*\xfc\xbe0\x96\xff\xff\xa1E\xdd\xb3\x96\xa2\xb2\x8cW\xc2#6Y\xa0\xf2\xd7\xb7*\xbb\xfb&#x27;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br></code></pre></td></tr></table></figure><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>a0,a1 =  [<span class="hljs-number">9919754465736816172569173052425931289517829891854342593290927744542118133847348662406222547572947297178727236300405992491684375909305177189047780739423811</span>, <span class="hljs-number">2558159371069956421749072997341298610563190398496109008773995596731281585562821740934514052081914548707643961639133075782257512937408016925625816701379184</span>]<br>b0,b1 =  [<span class="hljs-number">2605193676009044327751542404995552395651364785430784591434496675113980641629822868464738894812540539614357309531957125239722030117295601326651054134997855</span>, <span class="hljs-number">3197045230062951998763856325415663842943082118997359612045648551897230423045976716318651375603679498159844171771317291574116847000481449039959441081514627</span>]<br>n1 =  <span class="hljs-number">11681289596798868397030596649789726767285990000843272211957420810019522067387532211264897471096909399295930769738569665286430964000906934541163352714344519</span><br>n2 =  <span class="hljs-number">10557965421921341302784057525127038885537939006621468287750526343357317493360177624286054901157989185048184920439519551848192429179141349006037985539214071</span><br>xs =  [<span class="hljs-number">258466590698311071331247037930868824798600351331801120333006455557946900924072178631112955877</span>, <span class="hljs-number">9821442718613283840479818314015332171481079398147839951441986495105073061641539763228587316</span>, <span class="hljs-number">44840961768274714901326962447354283020302651991130253647924461474246517162698016799008370900</span>, <span class="hljs-number">4181026132314144744475531197443398345060712084263169112302700944672100108051705214872237804</span>, <span class="hljs-number">165146543464042899162832236414189105534540273973129205248892886798269176015886688299461120067</span>]<br>zs =  [<span class="hljs-number">11425495409956732054927782736077190158254288269207497569801502736793464884202670506015379318738941018498330797528225268357863433326525610294847934650384384</span>, <span class="hljs-number">6493331726937754866196531134748756985061780536063848814074103775547995272554729994318400024248625477632819500830464284078877134996898279637865644465061888</span>, <span class="hljs-number">993089766452002806192286220960438231942075399393023941745370499613681022868865277955412695258671518735133398965459541404411563617841529593232577007714304</span>, <span class="hljs-number">9947918164778455706315062500056819613968192691484842758450452417155875586535345223342626196771965216296162822961357707526761812463743778564968870859243520</span>, <span class="hljs-number">6798568953150532649740005658966557905457680624368167498216858785007123058363282156005182480229608829437870473084370507240870801760529936705635869020651520</span>]      <br>encflag =  <span class="hljs-string">b&#x27;\x84\x0bk\xfbmp\x1aV\x95q\r\x9bZ/s\xe5\xb4\xa5Y~y\xac\xaa\xd1\xff\xf1\xf1\xee#\xbd\x07:n\x9c\xd6\xcdV*\xfc\xbe0\x96\xff\xff\xa1E\xdd\xb3\x96\xa2\xb2\x8cW\xc2#6Y\xa0\xf2\xd7\xb7*\xbb\xfb&#x27;</span><br>module_bit = <span class="hljs-number">512</span><br>beta = <span class="hljs-number">0.6</span><br>G = <span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>, <span class="hljs-built_in">int</span>(module_bit*beta))<br>T = <span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>, module_bit - <span class="hljs-built_in">int</span>(module_bit*beta))<br>A = [a1, a1*a0%n1, a1^<span class="hljs-number">2</span>+a0^<span class="hljs-number">2</span>*a1%n1]<br>B = [a0, a0^<span class="hljs-number">2</span>+a1%n1, a0^<span class="hljs-number">3</span>+<span class="hljs-number">2</span>*a0*a1%n1]<br>C = []<br>G_ = inverse_mod(G, n1)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>    C.append(G_*(A[i]*xs[<span class="hljs-number">0</span>]+B[i]*xs[<span class="hljs-number">1</span>] - xs[i+<span class="hljs-number">2</span>])%n1)<br>M = Matrix(ZZ, <span class="hljs-number">6</span>, <span class="hljs-number">6</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>    M[i, i] = n1<br>    M[<span class="hljs-number">3</span>, i] = A[i]<br>    M[<span class="hljs-number">4</span>, i] = B[i]<br>    M[<span class="hljs-number">5</span>, i] = C[i]<br>    <br>M[<span class="hljs-number">3</span>, <span class="hljs-number">3</span>], M[<span class="hljs-number">4</span>, <span class="hljs-number">4</span>] = <span class="hljs-number">1</span>, <span class="hljs-number">1</span><br>M[<span class="hljs-number">5</span>, <span class="hljs-number">5</span>] = T<br>ML = M.LLL()<br>ans = ML[<span class="hljs-number">0</span>]<br>X = []<br>X.append(ans[<span class="hljs-number">3</span>]*G+xs[<span class="hljs-number">0</span>])<br>X.append(ans[<span class="hljs-number">4</span>]*G+xs[<span class="hljs-number">1</span>])<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>    X.append(ans[i]*G+xs[i+<span class="hljs-number">2</span>])<br>    <br>qq = <span class="hljs-built_in">int</span>(module_bit * (<span class="hljs-number">1</span>-beta)) <br>ys = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>    <span class="hljs-keyword">if</span> (X[i] - zs[i]) &lt; <span class="hljs-number">0</span>:<br>        ys.append((n1+X[i]-zs[i])&gt;&gt;qq&lt;&lt;qq)<br>    <span class="hljs-keyword">else</span>:<br>        ys.append((X[i]-zs[i])&gt;&gt;qq&lt;&lt;qq)<br><br>A = [b1, b1*b0%n2, (b1^<span class="hljs-number">2</span>+b0^<span class="hljs-number">2</span>*b1)%n2]<br>B = [b0, (b0^<span class="hljs-number">2</span>+b1)%n2, (b0^<span class="hljs-number">3</span>+<span class="hljs-number">2</span>*b0*b1)%n2]<br>C = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>    C.append((A[i]*ys[<span class="hljs-number">0</span>]+B[i]*ys[<span class="hljs-number">1</span>] - ys[i+<span class="hljs-number">2</span>])%n2)<br>    <br>M = Matrix(ZZ, <span class="hljs-number">6</span>, <span class="hljs-number">6</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>    M[i, i] = n2<br>    M[<span class="hljs-number">3</span>, i] = A[i]<br>    M[<span class="hljs-number">4</span>, i] = B[i]<br>    M[<span class="hljs-number">5</span>, i] = C[i]<br>    <br>M[<span class="hljs-number">3</span>, <span class="hljs-number">3</span>], M[<span class="hljs-number">4</span>, <span class="hljs-number">4</span>] = <span class="hljs-number">1</span>, <span class="hljs-number">1</span><br>M[<span class="hljs-number">5</span>, <span class="hljs-number">5</span>] = T<br><br>YY = M.LLL()[<span class="hljs-number">0</span>]<br>Y = []<br>Y.append(YY[<span class="hljs-number">3</span>]+ys[<span class="hljs-number">0</span>])<br>Y.append(YY[<span class="hljs-number">4</span>]+ys[<span class="hljs-number">1</span>])<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>    Y.append(YY[i]+ys[i+<span class="hljs-number">2</span>])<br>    <br>key = (b0*Y[<span class="hljs-number">4</span>]+b1*Y[<span class="hljs-number">3</span>])%n2<br>long_to_bytes(bytes_to_long(encflag)^^key)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>compet</category>
      
    </categories>
    
    
    <tags>
      
      <tag>lattice</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Inequality_Solving_with_CVP</title>
    <link href="/2022/11/20/Lattice/Inequality_Solving_with_CVP/"/>
    <url>/2022/11/20/Lattice/Inequality_Solving_with_CVP/</url>
    
    <content type="html"><![CDATA[<p>给了一个Padding Oracle，每次将接收到的c先解密，然后告诉你对应的明文有没有经过padding。即要满足：<br>$$<br>c^d \approx K (mod; n)<br>$$<br>也就是：<br>$$<br>L\le m\equiv c^d (mod; n)\le R<br>$$<br>考虑到可以找到一系列$a_i$​使得:<br>$$<br>L\le a_im (mod; n)\le R<br>$$<br>就可以这样构造Lattice：<br>$$<br>L= \left(<br>\begin{matrix}<br>1 &amp; a_1 &amp; a_2 &amp; \cdots  &amp; a_n\<br>&amp; n   &amp;     &amp;       &amp;    \<br>&amp;     &amp; n   &amp;        &amp;    \<br>&amp;     &amp;     &amp; \ddots &amp;    \<br>&amp;     &amp;     &amp;        &amp; n</p><p>\end{matrix}<br>\right)<br>$$<br>这个格子里包含了某个向量$v$，其上下界分别为$(0,L,L,\cdots)$和$(B,R,R,\cdots)$，$B$为$m$的上界。然后再套用CVP解不等式即可。</p><p>这里再介绍一下Inequality_Solving_with_CVP的思想。</p><p>首先记 $lb$ 为下界向量，$ub$ 为上界向量，算法的大致思路就是利用Babai求关于 $(lb+ub)//2$ 的CVP问题。算法的精髓在于将 $lb-ub$ 进行归一化，使得 $lb[i]-ub[i]$ 都相等，做法就是给 $lb[i]$ 和 $ub[i]$ 以及$L$ 的第 $i$ 列同时乘以一个权重 $ineq_weight$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_ineq):<br>ineq_weight = weight <span class="hljs-keyword">if</span> lb[i] == ub[i] <span class="hljs-keyword">else</span> max_diff // (ub[i] - lb[i])<br>applied_weights.append(ineq_weight)<br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_var):<br>mat[j, i] *= ineq_weight<br>lb[i] *= ineq_weight<br>ub[i] *= ineq_weight<br></code></pre></td></tr></table></figure><p>最后放一下原题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> flag <span class="hljs-keyword">import</span> flag<br><br>p = getStrongPrime(<span class="hljs-number">512</span>)<br>q = getStrongPrime(<span class="hljs-number">512</span>)<br>e = <span class="hljs-number">65537</span><br>n = p * q<br>phi = (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)<br><br>d = <span class="hljs-built_in">pow</span>(e, -<span class="hljs-number">1</span>, phi)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;n = <span class="hljs-subst">&#123;n&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;e = <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;flag_length = <span class="hljs-subst">&#123;flag.bit_length()&#125;</span>&quot;</span>)<br><br><span class="hljs-comment"># Oops! encrypt without padding!</span><br>c = <span class="hljs-built_in">pow</span>(flag, e, n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;c = <span class="hljs-subst">&#123;c&#125;</span>&quot;</span>)<br><br><span class="hljs-comment"># padding format: 0b0011111111........</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_padding</span>(<span class="hljs-params">c</span>):<br>    padding_pos = n.bit_length() - <span class="hljs-number">2</span><br>    m = <span class="hljs-built_in">pow</span>(c, d, n)<br><br>    <span class="hljs-keyword">return</span> (m &gt;&gt; (padding_pos - <span class="hljs-number">8</span>)) == <span class="hljs-number">0xFF</span><br><br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    c = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;c = &quot;</span>))<br>    <span class="hljs-built_in">print</span>(check_padding(c))<br><br></code></pre></td></tr></table></figure><p>本地测试的exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> *<br>p = getPrime(<span class="hljs-number">256</span>)<br>q = getPrime(<span class="hljs-number">256</span>)<br>n = p * q<br>e = <span class="hljs-number">65537</span><br>d = inverse_mod(e, (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>))<br>flag = <span class="hljs-number">923527005889600515717927945977637659146494233475843599679540322066522531810019204383510355169667412726034587411782045475101164773757</span><br>flag_length = flag.nbits()<br>c = <span class="hljs-built_in">pow</span>(flag, e, n)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_padding</span>(<span class="hljs-params">c</span>):<br>    padding_pos = n.bit_length() - <span class="hljs-number">2</span><br>    m = <span class="hljs-built_in">pow</span>(c, d, n)<br>    <span class="hljs-keyword">return</span> (m &gt;&gt; (padding_pos - <span class="hljs-number">8</span>)) == <span class="hljs-number">0xFF</span><br><br>k = n.bit_length() - <span class="hljs-number">2</span> - <span class="hljs-number">8</span><br>L = <span class="hljs-number">0xFF</span> &lt;&lt; k<br>R = L + (<span class="hljs-number">1</span> &lt;&lt; k) - <span class="hljs-number">1</span><br>B = <span class="hljs-number">1</span> &lt;&lt; flag_length<br>good = []<br><span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(good) &lt; flag_length // <span class="hljs-number">10</span> + <span class="hljs-number">10</span>:<br>    a = randrange(<span class="hljs-number">1</span>, n)<br>    cc = <span class="hljs-built_in">pow</span>(a, e, n) * c % n<br>    res = check_padding(cc)<br>    <span class="hljs-keyword">if</span> res:<br>        good.append(a)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(good))<br><br>M = matrix(good).stack(matrix.identity(<span class="hljs-built_in">len</span>(good)) * n)<br>M = matrix([<span class="hljs-number">1</span>] + <span class="hljs-built_in">len</span>(good) * [<span class="hljs-number">0</span>]).T.augment(M)<br><br>load(<span class="hljs-string">&quot;./Inequality_Solving_with_CVP/solver.sage&quot;</span>)<br>_, _, fin = solve(M, [<span class="hljs-number">0</span>] + [L] * <span class="hljs-built_in">len</span>(good), [B] + [R] * <span class="hljs-built_in">len</span>(good))<br><span class="hljs-built_in">print</span>(long_to_bytes(ZZ(fin[<span class="hljs-number">0</span>])))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>compet</category>
      
    </categories>
    
    
    <tags>
      
      <tag>lattice</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SMUPE problem in ECC</title>
    <link href="/2022/11/20/elliptic%20curve/SMUPE%20problem/"/>
    <url>/2022/11/20/elliptic%20curve/SMUPE%20problem/</url>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><br>m = Integer(<span class="hljs-built_in">int</span>.from_bytes(flag, <span class="hljs-string">&#x27;big&#x27;</span>))<br><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    p = getPrime(<span class="hljs-number">512</span>)<br>    q = getPrime(<span class="hljs-number">512</span>)<br>    n = p * q<br>    <span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">try</span>:<br>            a = randint(<span class="hljs-number">0</span>,n)<br>            b = randint(<span class="hljs-number">0</span>,n)<br>            Ep = EllipticCurve(GF(p), [a,b])<br>            Gp = Ep.lift_x(m) * <span class="hljs-number">2</span><br>            Eq = EllipticCurve(GF(q), [a,b])<br>            Gq = Eq.lift_x(m) * <span class="hljs-number">2</span><br>            y = crt([<span class="hljs-built_in">int</span>(Gp[<span class="hljs-number">1</span>]),<span class="hljs-built_in">int</span>(Gq[<span class="hljs-number">1</span>])],[p,q])<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> err:<br>            <span class="hljs-keyword">pass</span><br>    <span class="hljs-built_in">print</span>(n, a, b, y)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">172294871449219734798107561390050953188521804048922822821089133469311203282838373380377875439026704763161795744755842077098168865000919622849058673563093367982208461406754463061486548381031910500664522644112851433538900220678158500614358889303283424512500613989230182706150280378108198120547975067586971516137 96364198848848705158285537079110423277195642567952259110364340716064235491391751428297894031158531380770390132279773351908864500464136898214435682124920058680787844361038830281655403525413688733800204992965035715298006768830075744486662160034641936095862260725417156381782604284050422013822430528431227361197 159671991296677830056301471254363341009296510275785264872785778012113694456980363802313449256308519721141732376201460773400245993593482589976204166133901861729668851862460623196007194950257183079347864250025089670843915918257755173390253034175544519724905752818035812997127673241875836037243219829705927834235 12488950718303582218034044014469231718831962762275496002247643231013156969740771432142283441219754679322796472657777272189002660471344265360278317729760143808888761286079001687689905847842340334026140684913862478238950679283842053262939984135114755914484999538131508882930756717834516619580846526035684240079</span><br><span class="hljs-string">68223999778327454147340278776103578457271553299042143933393545815264609973076698756926443268448068478170652356574414692081569784751387548589991131379073395697581788909441130777261041802381911726085217610218552072019955091687392945670505312431379412346500975722411035854097380678429943612541679085918327184211 17770738203348676394013528065573927253738684355484382993047842078725009503696773096846474265836623641852326745278003624730438619552362071702422399552544609521188676816688215350418290389310564969049643786010837155281593524360805215661135722530433990410365868360692605842180028752038342347560333735922237369889 51098779961961751158122915158869440252746637314825788279336277128573162559246638101764647720433607480890890353266404408862366250798238531789338353122957455620883022785518154730850781795813200407904530871476660815008994170944440212300679621717029986782069464962522083711578039350861054405841275173019925642093 66166716533207612504484627791108393201158937155973610986551130733271280578971089095120371889664007733286220189256643852916722857958108530989447774212301117302384387307543583321894175828438280849870887046734108846642477438172082973113653660108354098554353657568190553303062608249271483295596847725316287446947</span><br><span class="hljs-string">69746411945288680494756625186262685100915769718266292828317232438356233082561457717802913380129463210508761458218383450347346543878887508111863823958801568318184343480949172473544777648327814945820830887234292193752526478863127665281603760310028685488010810374501002997654985226277837410385612336235789850487 35863433752003593718423506765770617029528142232119703360783695175632253222988642577448933602236360173888236658825392990787632391883856639629797550839027484460834276938254229716767734096212580735483050576113358898294845949901713373921320977266743302353193505619551975822052525104591593619094885194563759053232 61506888586914853748952584136999168853842713393989804770066310267385965404827751126077340386083884094392293257188958096424196079983180753698925334131753282172406136172626322186930421581433234090454842658630759776836012464473239198489670974246600345527623012180678219362862337775047849600595500703273175382703 23074173610330067975119318094549104916729459916683840171011959880097244030586124074672098644510552431454003148712810460842866906744010629559390690271268680358736511730336715376566599109974114862237643003353529058235474898207867615210853332379567542323247567216796697852808056755511484166810776261406177054777</span><br><span class="hljs-string">141780415980139617437215295846801567101402173619252056827987183835073254193657239443065408850513736462591151306400635298582358011825422183971334048391966413113755453698068836508230018713283240471925059428429812726435729369274579669831159812818547912726106821393226089324568082296082476059592963374588189677903 138746424736113892630456472492513519297466193136237748713651792342224061188757613931171106142936354280921317637536324608330692729231708881940151586955111567707002290198592160272885704125491274615556183787626484145861344784010051348839767532854926101536139055358860932766313079790639566311374298333660022416019 51726115599556454603920201657250521837735902629404616832316825062102322966835183071269936236690928753491837133603376577256803231041384630057026503126306733001505942744679790303330123718230247169888465167921020819210505089269412155033260560735554086852090518639465729269946494965164436190741639956526409236643 109654409762022740069514851260972908347716034747536569205325610944369939818174396230317316392277341065510361034050535743153611162427943916414124861678979771914963184421776448698855312979564147449272690263825911213298037101520123605413049352651130798112394668303713018564867048267647962314886530354112656660927</span><br><span class="hljs-string">134695529317631291539146989750080778456288116909537330643076226015019499585100645219201149819193483942761047608937632376000045678037096949063251694636264176978864350498001325274216745015187611426633155307352514688833306265311483797036137536737138146820693626589997367590775993967122039778179174477656098285151 5739321199968321627369946084893217618156071099515645889496757563432120794798492968096997315087609783917559636235489259519655394193193715753364023338741839200775528051686566670968651457520145892918236829346679247967821973265175306801170339421046331421835781903320059400232340368113764816537593043564619129091 19673160600783884558420797494268753813890359647736289572838063131711269874000492472573124412257756881986515876284947639879236228461164246881762817017531477201318279812271247605969526804283198993102225186731231831294213792057134691470071907311239898997202853181993775441584378767147396666275272938837258357423 16897173108120076789922861933836017988034034913979337434078332952051799507194042012051980050429727113676699771772883294665409080790164523153924333774353032403848045609407735317482100956730663470698029136912240237112767052198706217408124644467054727063902614284435035076029952831418531957452256906889271788660</span><br><span class="hljs-string">108631997335203066432695467871764765359535346338288176017618709868611883736328359105943651466896885704753893021031355220198313022607240746637026558990572053372001779938093596718948899761553876823305187704800253652009189892280549587130446638129290899670752310731109594745013563422110453795138476510927065537819 53186625650395498513439276601148324935331371411190607911833993964075202667438243234505710009859940105805328184291501428682891944699728069011511208448749132382024172290085402121472873185791975075398049469908097240414598661986593060452061227701643807521128142747260925759613091495839896971643248717676885197644 52709509084184104167650277788945043330126097533959255658173397630643774367938336071212214281041856314502929120225540280940224731284318314188334401609349175298441766962844025460361899368481713758076026229654035313132750449381123295594073954550981806651354410007449428669257683889916088487170632832744327614463 100260604505216418319923489428146996468156773172005794829064325549637959539041791314163531463726947409321908377241081956519122122262033227578640846072409813184989637914837945813897560451295053865278594114754492413312832734981399784589146893658856979887630033309457853967429746353718137461785133619446282493126</span><br><span class="hljs-string">107338361645955025621587108367500347348984102219339572552748381028739611029946302714920823684765311935547487453509535204574142858361737866739285841603885839441733030101476343149903190982542554096941815202891147725076023628145124709929620451309674856615713933442851718371615889591966077523086598769484929332367 100872379615239890056528793994805290254429184626178615179949021889055871474237228059318594996850343091819482928969268211528584474928620075395005093777657472616646086984808630643337673511907312828907027299569420774094158785966357193601409625830742669863851550399504009908003166662860318527135193218238780676800 52637469044026090728662077516653409825725186092147185410215323273449329656983845536711234923756687817513771235055035977388966611329613167758082577958758423429648769821507972676781188078791048118663252233256924489724994317727922287107822238963194994782575166160292521918653409858431855957865223409101119244152 57971958593516466763891620734062821771076712450708456876484562483981622035231519724366540336500884101001407519929342324257929081898526022577405465205118192907601214300359691638071300661277784420068767639904239138656962018735555155063349452232501292852176876546222413194770858197241287367089881969293760207489</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>compet</category>
      
    </categories>
    
    
    <tags>
      
      <tag>elliptic curve</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
